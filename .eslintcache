[{"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\index.js":"1","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\loader.js":"2","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\App.js":"3","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Catalogue.js":"4","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\HotDeals.js":"5","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Header.js":"6","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Footer.js":"7","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Vendor.js":"8","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Home.js":"9","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Courier.js":"10","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Customer.js":"11","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CustomerDashBoard.js":"12","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\VerifyPayment.js":"13","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CourierDashBoard.js":"14","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\RegisterCourier.js":"15","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\RegisterCustomer.js":"16","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\RegisterVendor.js":"17","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\ProdDetailPage.js":"18","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\VendorDashBoard.js":"19","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Payment.js":"20","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\SingleProdCheckOutPage.js":"21","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CartCheckOut.js":"22","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CourierDeals.js":"23","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CourierResolutions.js":"24","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\VendResolutions.js":"25","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CourierTransactions.js":"26","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CourierDispatch.js":"27","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\VendProducts.js":"28","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\VendDeals.js":"29","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\VendTransactions.js":"30","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\savecart.js":"31","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\savesingleorder.js":"32","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\useFetch.js":"33","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\customerPrivatePages\\CustomerCart.js":"34","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\customerPrivatePages\\CustomerNotification.js":"35","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\customerPrivatePages\\CustomerComplain.js":"36","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\customerPrivatePages\\CustomerDelivery.js":"37","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\customerPrivatePages\\CustomerOrder.js":"38","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\saveorder.js":"39"},{"size":363,"mtime":1650210906704,"results":"40","hashOfConfig":"41"},{"size":45,"mtime":1650210853913,"results":"42","hashOfConfig":"41"},{"size":4017,"mtime":1655000787930,"results":"43","hashOfConfig":"41"},{"size":196,"mtime":1649749918277,"results":"44","hashOfConfig":"41"},{"size":179,"mtime":1649749896279,"results":"45","hashOfConfig":"41"},{"size":4770,"mtime":1654467421119,"results":"46","hashOfConfig":"41"},{"size":483,"mtime":1649749936679,"results":"47","hashOfConfig":"41"},{"size":5328,"mtime":1659343529188,"results":"48","hashOfConfig":"41"},{"size":3054,"mtime":1659343548965,"results":"49","hashOfConfig":"41"},{"size":5133,"mtime":1651685399504,"results":"50","hashOfConfig":"41"},{"size":5118,"mtime":1659341311254,"results":"51","hashOfConfig":"41"},{"size":3686,"mtime":1658585195829,"results":"52","hashOfConfig":"41"},{"size":1905,"mtime":1655141220862,"results":"53","hashOfConfig":"41"},{"size":3237,"mtime":1658242620262,"results":"54","hashOfConfig":"41"},{"size":9508,"mtime":1651488965662,"results":"55","hashOfConfig":"41"},{"size":5481,"mtime":1653087368000,"results":"56","hashOfConfig":"41"},{"size":10398,"mtime":1661990035327,"results":"57","hashOfConfig":"41"},{"size":8749,"mtime":1654448177801,"results":"58","hashOfConfig":"41"},{"size":3164,"mtime":1651855034302,"results":"59","hashOfConfig":"41"},{"size":13356,"mtime":1661688688459,"results":"60","hashOfConfig":"41"},{"size":8147,"mtime":1654451014404,"results":"61","hashOfConfig":"41"},{"size":14506,"mtime":1658822386007,"results":"62","hashOfConfig":"41"},{"size":6644,"mtime":1658697094660,"results":"63","hashOfConfig":"41"},{"size":418,"mtime":1658240354276,"results":"64","hashOfConfig":"41"},{"size":421,"mtime":1651848108530,"results":"65","hashOfConfig":"41"},{"size":6360,"mtime":1658244369715,"results":"66","hashOfConfig":"41"},{"size":10153,"mtime":1658582371138,"results":"67","hashOfConfig":"41"},{"size":18997,"mtime":1663409423446,"results":"68","hashOfConfig":"41"},{"size":7192,"mtime":1658696673315,"results":"69","hashOfConfig":"41"},{"size":6472,"mtime":1653039856663,"results":"70","hashOfConfig":"41"},{"size":18524,"mtime":1653748963882,"results":"71","hashOfConfig":"41"},{"size":31320,"mtime":1661693501274,"results":"72","hashOfConfig":"41"},{"size":2335,"mtime":1655100851044,"results":"73","hashOfConfig":"41"},{"size":3925,"mtime":1658830594713,"results":"74","hashOfConfig":"41"},{"size":216,"mtime":1658584961881,"results":"75","hashOfConfig":"41"},{"size":204,"mtime":1658584996715,"results":"76","hashOfConfig":"41"},{"size":9991,"mtime":1659343570842,"results":"77","hashOfConfig":"41"},{"size":195,"mtime":1658584910129,"results":"78","hashOfConfig":"41"},{"size":31256,"mtime":1662073310266,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"a37ppr",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"82"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"82"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"82"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"82"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\index.js",[],["174","175"],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\loader.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\App.js",["176","177","178"],"import './App.css';\nimport { useState, useCallback, useEffect, useRef, createContext } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Vendor from './components/Vendor';\nimport Home from './components/Home';\nimport Courier from './components/Courier';\nimport Catalogue from './components/Catalogue';\nimport HotDeals from './components/HotDeals';\nimport Customer from './components/Customer';\nimport VendorDashBoard from './components/VendorDashBoard';\nimport CourierDashBoard from './components/CourierDashBoard';\nimport CustomerDashBoard from './components/CustomerDashBoard';\nimport VerifyPayment from './components/VerifyPayment';\nimport RegisterVendor from './components/RegisterVendor';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n// import { useHistory } from 'react-router-dom';\nimport './components/styles/bootstrap.min.css';\n// import './components/styles/bootstrap';\n// import './components/styles/jquery-3.6.0';\n// import {bootstrap} from 'bootstrap';\n// import {jquery} from 'jquery';\nimport RegisterCourier from './components/RegisterCourier';\nimport RegisterCustomer from './components/RegisterCustomer';\nimport ProdDetailPage from './components/ProdDetailPage';\nimport CartCheckOut from './components/CartCheckOut';\nimport Payment from './components/Payment';\nimport SingleProdCheckOutPage from './components/SingleProdCheckOutPage';\n// import { UseFetchJSON } from './components/useFetch'\n\nfunction App () { \n  // document.body.style.backgroundColor = 'silver';\n  // document.style.backgroundColor = 'gray';\n\n\n  \n  let parcelCart = JSON.parse(localStorage.getItem('parcelCart')) || null;\n \n let calcCart = useCallback(()=>{\n  if(parcelCart) {\n      let totItem = 0;\n      for (let i=0; i<parcelCart.length; i++) {\n          let num = parcelCart[i].purchased_qty;\n          totItem += num;\n      }\n      console.log(totItem);\n      let cartTot = {\"totItem\":totItem};\n      localStorage.setItem('cartTot', JSON.stringify(cartTot));\n  } \n },[parcelCart]); \n\n useEffect(()=>{\n     calcCart();\n },[calcCart, parcelCart]);\n \n\n  return (\n    <div className=\"main-body\">\n      <Router>\n        <Header />\n          <Switch>\n            <Route exact path=\"/home\">\n              <Home/>\n            </Route>\n            <Route exact path=\"/\">\n              <Home/>\n            </Route>\n            <Route exact path=\"/vendor\">\n              <Vendor/>\n            </Route>\n            <Route exact path=\"/courier\">\n              <Courier/>\n            </Route>\n            <Route exact path=\"/catalogue\">\n              <Catalogue/>\n            </Route>\n            <Route exact path=\"/hot-deals\">\n              <HotDeals/>\n            </Route>\n            <Route exact path=\"/customer\">\n              <Customer/>\n            </Route>\n            <Route exact path=\"/register-vendor\">\n              <RegisterVendor/>\n            </Route>\n            <Route exact path=\"/register-courier\">\n              <RegisterCourier/>\n            </Route>\n            <Route exact path=\"/register-customer\">\n              <RegisterCustomer/>\n            </Route>\n            <Route exact path=\"/courier-dash\">\n              <CourierDashBoard/>\n            </Route>\n            <Route exact path=\"/vendor-dash\">\n              <VendorDashBoard/>\n            </Route>\n            <Route exact path=\"/customer-dash\">\n              <CustomerDashBoard/>\n            </Route>\n            <Route exact path=\"/cart-check\">\n              <CartCheckOut/>\n            </Route>\n            <Route exact path=\"/single\">\n              <SingleProdCheckOutPage/>\n            </Route>\n            <Route exact path=\"/payment\">\n              <Payment/>\n            </Route>\n            <Route exact path=\"/verify\">\n              <VerifyPayment/>\n            </Route>\n            <Route exact path=\"/prod-detail\">\n              <ProdDetailPage/>\n            </Route>\n          </Switch>\n        <Footer/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Catalogue.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\HotDeals.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Header.js",["179","180"],"import { Link, useHistory } from 'react-router-dom';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport './styles/header.css';\r\n\r\n\r\n\r\nconst Header = () => {\r\n\r\n    const [cartVal, setCartVal] = useState(0);\r\n    let history = useHistory();\r\n    let logcus = JSON.parse(localStorage.getItem('logcus'));\r\n    let logvend = JSON.parse(localStorage.getItem('logvend'));\r\n    let logcour = JSON.parse(localStorage.getItem('logcour'));\r\n\r\n    let refresh = () => {\r\n        window.location.reload(false);\r\n    }\r\n    // setInterval(() => {\r\n    //    refresh();\r\n    // }, 10000);\r\n    // console.log(logcus);\r\n\r\n    // const handleCustomerDashboardView = () => {\r\n    //     if(logcus) history.push('/customer-dash')\r\n    // }\r\n\r\n//     const [cartVal, setCartVal] = useState(0);\r\n//     // let totItem = 0;\r\n//     let parcelCart = JSON.parse(localStorage.getItem('parcelCart')) || null;\r\n//     console.log(parcelCart);\r\n//    let calcCart = useCallback(()=>{\r\n//     if(parcelCart) {\r\n//         let totItem = 0;\r\n//         for (let i=0; i<parcelCart.length; i++) {\r\n//             let num = parcelCart[i].purchased_qty;\r\n//             totItem += num;\r\n//         }\r\n//         console.log(totItem);\r\n//         setCartVal(totItem);\r\n//     }\r\n//    },[parcelCart]); \r\n\r\n//    useEffect(()=>{\r\n//        calcCart();\r\n//    },[calcCart, parcelCart]);\r\n\r\n\r\nconst updateCartTot = useCallback(()=>{\r\n    let cartTot = JSON.parse(localStorage.getItem(\"cartTot\")) || null;\r\n    if(cartTot) setCartVal(cartTot.totItem);\r\n},[]);\r\n\r\n\r\nuseEffect(()=>{\r\n    updateCartTot();\r\n},[updateCartTot]);\r\n\r\n\r\n  \r\n    return (\r\n      <div className=\"mainHeader\">\r\n          <div className=\"upperHeader\">\r\n                <div id=\"brand-container\">\r\n                    <img className=\"img-fluid\" alt=\"brand-logo\" id=\"brand_icon\" src=\"parcel_ico.png\" />\r\n                </div>\r\n                <div id=\"search-box\">\r\n                    <input type=\"search\" placeholder=\"Search for Products\" id=\"search-input\"/>\r\n                    <button type=\"button\" id=\"submit-input\">\r\n                        <img className=\"tab-icon\" id=\"search-img\" src=\"search_ico.png\" alt=\"search-submit\" />\r\n                    </button>\r\n                </div>\r\n                <Link to='/cart-check'>\r\n                    <div id=\"cart\">\r\n                        <div id=\"cart-img-con\">\r\n                            <img id=\"cart-img\" alt=\"cart-img\" src=\"cart_bask_ico.png\" className=\"img-fluid\"/>\r\n                        </div>\r\n                        <div id=\"cart-val\">\r\n                            <p className='badge' style={{textAlign:\"center\", color:\"rgb(219, 33, 76)\", fontSize:\"1.2em\"}}>{cartVal}</p>\r\n                        </div>\r\n                    </div>\r\n                </Link>\r\n          </div>\r\n          <div className=\"buffer\">\r\n\r\n          </div>\r\n          <div className=\"lowerHeader\">\r\n          <Link to=\"/home\"><div className=\"tab-container\" id=\"home\">\r\n                    <img className=\"tab-icon\" src=\"home_ico.png\" alt=\"vendor_icon\"/>\r\n                    {window.innerWidth > 415? <p className=\"tab-info\">Home</p>: \"\"}\r\n                </div></Link>\r\n                <Link to={logvend?\"/vendor-dash\":\"/vendor\"}><div className=\"tab-container\" id=\"vendor\">\r\n                    <img className=\"tab-icon\" src=\"vendor_ico.png\" alt=\"vendor_icon\"/>\r\n                    {window.innerWidth > 415? <p className=\"tab-info\">Vendor</p>: \"\"}\r\n                </div></Link>\r\n                <Link to={logcour?\"/courier-dash\":\"/courier\"}><div className=\"tab-container\" id=\"transporter\">\r\n                    <img className=\"tab-icon\" src=\"courier_ico.png\" alt=\"courier_icon\"/>\r\n                    {window.innerWidth > 415? <p className=\"tab-info\">Courier</p>: \"\"}\r\n                </div></Link>\r\n                <Link to=\"/catalogue\"><div className=\"tab-container\" id=\"catalogue\">\r\n                    <img className=\"tab-icon\" src=\"catalogue_ico.png\" alt=\"catalogue_icon\"/>\r\n                    {window.innerWidth > 415? <p className=\"tab-info\">Catalogue</p>: \"\"}\r\n                </div></Link>\r\n                <Link to=\"/hot-deals\"><div className=\"tab-container\" id=\"hot-deals\">\r\n                    <img className=\"tab-icon\" src=\"hot_deal_ico.png\" alt=\"hot-deal_icon\"/>\r\n                    {window.innerWidth > 415? <p className=\"tab-info\">Hot-Deals</p>: \"\"}\r\n                </div></Link>\r\n                <Link to={logcus?'/customer-dash':'/customer'}><div className=\"tab-container\" id=\"client\">\r\n                    <img className=\"tab-icon\" src=\"usericon.png\" alt=\"usericon\"/>\r\n                    {window.innerWidth > 415? <p className=\"tab-info\">Customer</p>: \"\"}\r\n                </div></Link>\r\n          </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Header","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Footer.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Vendor.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Home.js",["181","182","183"],"import './styles/home.css';\r\nimport { useCallback, useEffect, useReducer, createContext, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { UseFetchJSON } from './useFetch';\r\nimport ProdDetailPage from './ProdDetailPage';\r\n\r\n\r\n\r\nconst Home = () => {\r\n    let initialState = {\r\n        products: []\r\n    }\r\n\r\n    let history = useHistory();\r\n    // let [showProd, setShowProd] = useState(false);\r\n\r\n    // const ProductContext = createContext();\r\n    // let [prodView, setProdView] = useState();\r\n\r\n\r\n   \r\n    const getAllProds = useCallback((data)=>{\r\n        return dispatch({\r\n            type: \"GET_ALL_PRODUCTS\",\r\n            payload: data\r\n        })\r\n    },[]);\r\n\r\n    const prodDetail = useCallback((id)=>{\r\n        return dispatch({\r\n            type: \"PROD_DETAIL\",\r\n            payload: id\r\n        })\r\n    },[]);\r\n\r\n    let reducer = (state, action) => {\r\n        if (action.type === \"GET_ALL_PRODUCTS\") {\r\n            let adjData = action.payload;\r\n            // let adjData = action.payload.map((prod) => {\r\n            //     return {...prod, \"edit\": false}\r\n            // });\r\n            return {...state, products:adjData}   \r\n        }\r\n\r\n        if (action.type === \"PROD_DETAIL\") {\r\n            state.products.map((prod)=>{\r\n                if (prod.id === action.payload) {\r\n                    // setProdView(prod);\r\n                    localStorage.setItem('prodView', JSON.stringify(prod));\r\n                    history.push('/prod-detail');\r\n                }\r\n                return null;\r\n            });\r\n        }\r\n\r\n        return state;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        let apiUrl = \"http://localhost:7000/parcel_product/get_prod/\";\r\n        let data = UseFetchJSON(apiUrl, 'GET');\r\n        data.then((res)=>{\r\n            getAllProds(res.data);\r\n        });\r\n    },[getAllProds]);\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    console.log(state);\r\n    // console.log(prodView);\r\n\r\n    return (\r\n     <div className='container'> \r\n        <div className='prod-contain'>\r\n            {state.products.map((prod, index)=>(\r\n                <div key={index} className='prod-home-frag'>\r\n                    <p  className=\"badge prod-name\">{prod.prod_name}</p>\r\n                    <p  className=\"prod-disc\">-{40 + prod.prod_disc}%</p>\r\n                    <img alt=\"prod-avatar\" className=\"img-thumbnail prod-img\" src={prod.prod_photo} />\r\n                    <div className='well bottom-container'>\r\n                        <p className='prod-desc well'>{prod.prod_model}</p>\r\n                        <p className='prod-desc well'>{prod.prod_desc}</p>\r\n                        <div className='prod-price-button'>\r\n                            <p className='badge'>₦ {prod.prod_price}</p>\r\n                            <button onClick={()=>prodDetail(prod.id)} className='btn'>View</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ))}  \r\n        </div>    \r\n     </div>\r\n    );\r\n}\r\n\r\nexport default Home","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Courier.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Customer.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CustomerDashBoard.js",["184","185"],"import './styles/vendor.css';\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CustomerCart from './customerPrivatePages/CustomerCart';\r\nimport CustomerOrder from './customerPrivatePages/CustomerOrder';\r\nimport CustomerDelivery from './customerPrivatePages/CustomerDelivery';\r\nimport CustomerNotification from './customerPrivatePages/CustomerNotification';\r\nimport CustomerComplain from './customerPrivatePages/CustomerComplain';\r\n\r\n\r\nconst CustomerDashBoard = () => {\r\n \r\n    let loggedCus = JSON.parse(localStorage.getItem('logcus')) || null;\r\n    const [carttab, setCartTab] = useState(false);\r\n    const [ordertab, setOrderTab] = useState(false);\r\n    const [deliverytab, setDeliveryTab] = useState(false);\r\n    const [notifytab, setNotifyTab] = useState(false);\r\n    const [complaintab, setComplainTab] = useState(false);\r\n\r\n    const handleCartTabClick = () => {\r\n        setCartTab(true);\r\n        setOrderTab(false);\r\n        setDeliveryTab(false);\r\n        setNotifyTab(false);\r\n        setComplainTab(false);\r\n    }\r\n\r\n    const handleOrderTabClick = () => {\r\n        setCartTab(false);\r\n        setOrderTab(true);\r\n        setDeliveryTab(false);\r\n        setNotifyTab(false);\r\n        setComplainTab(false);\r\n    }\r\n\r\n    const handleDeliveryTabClick = () => {\r\n        setCartTab(false);\r\n        setOrderTab(false);\r\n        setDeliveryTab(true);\r\n        setNotifyTab(false);\r\n        setComplainTab(false);\r\n    }\r\n\r\n\r\n    const handleNotifyTabClick = () => {\r\n        setCartTab(false);\r\n        setOrderTab(false);\r\n        setDeliveryTab(false);\r\n        setNotifyTab(true);\r\n        setComplainTab(false);\r\n    }\r\n\r\n    const handleComplainTabClick = () => {\r\n        setCartTab(false);\r\n        setOrderTab(false);\r\n        setDeliveryTab(false);\r\n        setNotifyTab(false);\r\n        setComplainTab(true);\r\n    }\r\n\r\n    let history = useHistory();\r\n    const handleLogout = () => {\r\n        localStorage.removeItem('logcus');\r\n        history.push('/customer');\r\n    }    \r\n   \r\n\r\n    // const {first_name, last_name, cour_photo} = loggedCour;\r\n\r\n    return (\r\n     <div className='container log-vendor'>\r\n         {loggedCus ? (<div>\r\n            <div>\r\n                <button onClick={handleLogout} className='btn logout-btn'>Logout</button><h4 className='Vendor-Log-Legend'>Customer Dashboard</h4> <br/>\r\n            </div> \r\n            <div className='photo-container'>\r\n                {loggedCus && <p id='vendor-details'>Hello, {loggedCus.last_name + \" \" + loggedCus.first_name}</p>}\r\n            </div>\r\n         </div>): history.push('/customer')}\r\n         <div className='sub-tab'>\r\n             <div onClick={handleCartTabClick} className={carttab?\"sub-tab-cour-active\":\"sub-tab-item-cus\"} >Carts</div>\r\n             <div onClick={handleOrderTabClick} className={ordertab?\"sub-tab-cour-active\":\"sub-tab-item-cus\"} >Orders</div>\r\n             <div onClick={handleDeliveryTabClick} className={deliverytab?\"sub-tab-cour-active\":\"sub-tab-item-cus\"} >Deliveries</div>\r\n             <div onClick={handleNotifyTabClick} className={notifytab?\"sub-tab-cour-active\":\"sub-tab-item-cus\"} >Notifications</div>\r\n             <div onClick={handleComplainTabClick} className={complaintab?\"sub-tab-cour-active\":\"sub-tab-item-cus\"} >Complaints</div>\r\n         </div>\r\n         <div>\r\n             {carttab?<CustomerCart/>:\"\"}\r\n             {ordertab?<CustomerOrder/>:\"\"}\r\n             {deliverytab?<CustomerDelivery/>:\"\"}\r\n             {notifytab?<CustomerNotification/>:\"\"}\r\n             {complaintab?<CustomerComplain/>:\"\"}\r\n         </div>\r\n     </div>\r\n    );\r\n}\r\n\r\nexport default CustomerDashBoard","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\VerifyPayment.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CourierDashBoard.js",["186","187","188","189"],"import './styles/vendor.css';\r\nimport './styles/product.css';\r\nimport { useState, useEffect, useReducer, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CourierDeals from './CourierDeals';\r\nimport CourierDispatch from './CourierDispatch';\r\nimport CourierResolutions from './CourierResolutions'\r\nimport CourierTransactions from './CourierTransactions'\r\nimport { UseFetchJSON } from './useFetch';\r\n\r\n\r\n\r\nconst CourierDashBoard = () => {\r\n    // localStorage.removeItem('logcour');\r\n\r\n    const [dealtab, setDealTab] = useState(false);\r\n    const [dispatchtab, setDispatchTab] = useState(false);\r\n    const [resoltab, setResolTab] = useState(false);\r\n    const [txntab, setTxnTab] = useState(false);\r\n\r\n    const handleDealTabClick = () => {\r\n        setDealTab(true);\r\n        setDispatchTab(false);\r\n        setResolTab(false);\r\n        setTxnTab(false);\r\n    }\r\n\r\n    const handleDispatchTabClick = () => {\r\n        setDealTab(false);\r\n        setDispatchTab(true);\r\n        setResolTab(false);\r\n        setTxnTab(false);\r\n    }\r\n\r\n    const handleResolTabClick = () => {\r\n        setDealTab(false);\r\n        setDispatchTab(false);\r\n        setResolTab(true);\r\n        setTxnTab(false);\r\n    }\r\n\r\n\r\n    const handleTxnTabClick = () => {\r\n        setDealTab(false);\r\n        setDispatchTab(false);\r\n        setResolTab(false);\r\n        setTxnTab(true);\r\n    }\r\n\r\n    let history = useHistory();\r\n    const handleLogout = () => {\r\n        localStorage.removeItem('logcour');\r\n        history.push('/courier');\r\n    }\r\n    let loggedCour = JSON.parse(localStorage.getItem('logcour')) || null;\r\n\r\n    \r\n   \r\n\r\n    // const {first_name, last_name, cour_photo} = loggedCour;\r\n\r\n    return (\r\n     <div className='container log-vendor'>\r\n         {loggedCour ? (<div>\r\n            <div>\r\n                <button onClick={handleLogout} className='btn logout-btn'>Logout</button><h4 className='Vendor-Log-Legend'>Courier Dashboard</h4> <br/>\r\n            </div> \r\n            <div className='photo-container'>\r\n                {loggedCour && <p id='vendor-details'>Hello, {loggedCour.last_name + \" \" + loggedCour.first_name}</p>}\r\n                <div className='avatar-container'>\r\n                    {loggedCour && <img alt='avatar' src={loggedCour.cour_photo}/>}\r\n                </div>\r\n            </div>\r\n         </div>): history.push('/courier')}\r\n         <div className='sub-tab'>\r\n             <div onClick={handleDealTabClick} className={dealtab?\"sub-tab-cour-active\":\"sub-tab-cour-item\"} >Deals</div>\r\n             <div onClick={handleDispatchTabClick} className={dispatchtab?\"sub-tab-cour-active\":\"sub-tab-cour-item\"} >Dispatches</div>\r\n             <div onClick={handleTxnTabClick} className={txntab?\"sub-tab-cour-active\":\"sub-tab-cour-item\"} >Transactions</div>\r\n             <div onClick={handleResolTabClick} className={resoltab?\"sub-tab-cour-active\":\"sub-tab-cour-item\"} >Resolutions</div>\r\n         </div>\r\n         <div>\r\n             {dealtab?<CourierDeals/>:\"\"}\r\n             {dispatchtab?<CourierDispatch/>:\"\"}\r\n             {txntab?<CourierTransactions/>:\"\"}\r\n             {resoltab?<CourierResolutions/>:\"\"}\r\n         </div>\r\n     </div>\r\n    );\r\n}\r\n\r\nexport default CourierDashBoard","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\RegisterCourier.js",["190"],"import './styles/vendor.css';\r\nimport { Link } from 'react-router-dom';\r\n// import CSRFTOKEN from './CSRFTOKEN';\r\nimport { useState } from 'react';\r\nimport { UseFetch } from './useFetch';\r\n\r\n\r\n\r\nconst RegisterCourier = () => {\r\n\r\n    const [courphoto, setCourPhoto] = useState(null);\r\n\r\n\r\n    const [courier, setCourier] = useState({\r\n        \"first_name\": \"\",\r\n        \"last_name\": \"\",\r\n        \"bus_country\": \"\",\r\n        \"bus_state\": \"\",\r\n        \"bus_street\": \"\",\r\n        \"cac_reg_no\": \"\",\r\n        \"nin\": \"\",\r\n        \"phone_no\": \"\",\r\n        \"email\": \"\",\r\n        \"password\": \"\",\r\n        \"cour_policy\": false\r\n  });  \r\n\r\n  const {first_name, last_name, bus_country, bus_state, \r\n  bus_street, cac_reg_no, nin, phone_no, email, password, cour_policy} = courier;\r\n\r\n  const $ = window.$;\r\n  const handleCourPhoto = (e) => {\r\n    setCourPhoto(e.target.files[0]);\r\n    let tmp_path = URL.createObjectURL(e.target.files[0]);\r\n    $(\"#tar-cour-img\").fadeIn(\"slow\").attr('src', tmp_path);\r\n}\r\n    const courRegUrl = 'http://localhost:7000/parcel_backends/reg_temp_cour/'; \r\n    const handleCourChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        let checked = e.target.checked;\r\n        setCourier({...courier, [name]:value, cour_policy:checked});\r\n    }\r\n\r\n    console.log(cour_policy);\r\n\r\n    const [courAlert, setCourAlert] = useState('');\r\n    const [courSuccess, setCourSuccess] = useState('');\r\n\r\n    courAlert && setTimeout(() => {\r\n        setCourAlert('');\r\n    }, 10000);\r\n    \r\n    courSuccess && setTimeout(() => {\r\n        setCourSuccess('');\r\n    }, 10000);\r\n    \r\n   \r\n\r\n    // $('#cour-img').change( async (e)=> {\r\n    //     let tmp_path = await URL.createObjectURL(e.target.files[0]);\r\n    //     // console.log(tmp_path);\r\n    //     // let full_path = $(\"#vend-img\").val();\r\n    //     // let base_name = full_path.split('\\\\').pop().split('/').pop();\r\n    //     // console.log(base_name);\r\n    //     $(\"#tar-cour-img\").fadeIn(\"slow\").attr('src', tmp_path);\r\n    //     // let path_start = \"http://localhost:5000/static/dxlApp/Product_Image/\";\r\n    //     // $(\"#img_path\").html(tmp_path + \"<br/>\" + path_start + base_name);\r\n    // });\r\n\r\n    const [duPass, setDupass] = useState('');\r\n\r\n\r\n    const handleSubmitCour = (e) => {\r\n        e.preventDefault();\r\n    \r\n        if(first_name && last_name && bus_country && bus_state && courphoto\r\n            && bus_street && cac_reg_no && nin && phone_no && email && password) {\r\n                const formData = new FormData();\r\n                let full_path = $(\"#cour-img\").val();\r\n                let base_name = full_path.split('\\\\').pop().split('/').pop();\r\n                console.log(base_name);\r\n                    formData.append('first_name', first_name);\r\n                    formData.append('last_name', last_name);\r\n                    formData.append('bus_country', bus_country);\r\n                    formData.append('bus_state', bus_state);\r\n                    formData.append('bus_street', bus_street);\r\n                    formData.append('cac_reg_no', cac_reg_no);\r\n                    formData.append('nin', nin);\r\n                    formData.append('phone_no', phone_no);\r\n                    formData.append('email', email);\r\n                    formData.append('password', password);\r\n                    formData.append('cour_photo', courphoto, base_name);\r\n                    formData.append('cour_policy', cour_policy);\r\n                    formData.append('reg_date', new Date().toISOString());\r\n                    formData.append('is_email_verified', false);\r\n\r\n                    console.log(formData.get('bus_street'));\r\n                    console.log(email);\r\n\r\n                if(password === duPass){\r\n                    let data = UseFetch(courRegUrl, 'POST', formData);\r\n                    data.then((res)=> {\r\n                        if (res.status === \"success\") {\r\n                            setCourSuccess(res.data);\r\n                        } else if (res.status === 'error') {\r\n                            setCourAlert(res.data);\r\n                        }\r\n                    });\r\n                        // {if (res.status == 'OK') { setApiAlert(res.data.first_name + ', has been registered.')}});\r\n                    // }\r\n                } else {\r\n                    setCourAlert('Passwords do not match');\r\n                }\r\n            } else {\r\n                setCourAlert('Some fields are blank');\r\n            }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Vendor-Frag\">\r\n            <form onSubmit={handleSubmitCour} name=\"vendor-log-form\" className=\"container\">\r\n                <div className=\"input-container\">\r\n                    <legend className=\"Vendor-Log-Legend\" >Courier Registration Form</legend> <br/>\r\n                    {courAlert?(<div id='apiAlert' style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-danger alert-dismissible' role='alert'>\r\n                                    {courAlert}\r\n                                    <button id='closeApi' className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                                </div>): \"\"}\r\n                               {courSuccess?(<div  style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-success alert-dismissible' role='alert'>\r\n                                    {courSuccess}\r\n                                    <button  className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                                </div>): \"\"}\r\n                            <div className='photo-container'>\r\n                                   <div className='upload-label'><label htmlFor='cour_photo'>Upload Photo</label> <input name=\"cour_photo\" onChange={handleCourPhoto} id='cour-img' type=\"file\" /></div> <div  className='avatar-container'>{courphoto && <img id='tar-cour-img' className='img-thumbnail' src=''/>}</div>\r\n                            </div> \r\n                            <hr/>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"first_name\" value={first_name} onChange={handleCourChange} type=\"text\" placeholder=\"First Name Here\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"last_name\" value={last_name} onChange={handleCourChange} type=\"text\" placeholder=\"Last Name Here\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"bus_country\" value={bus_country} onChange={handleCourChange}  type=\"text\" placeholder=\"Business Country\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"bus_state\" value={bus_state} onChange={handleCourChange} type=\"text\" placeholder=\"Business State/Province\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"bus_street\" value={bus_street} onChange={handleCourChange} type=\"text\" placeholder=\"Business Street Address\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"cac_reg_no\" value={cac_reg_no} onChange={handleCourChange} type=\"text\" placeholder=\"Business CAC Reg. No.\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"nin\" value={nin} onChange={handleCourChange} type=\"text\" placeholder=\"National Identity Number (NIN)\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"phone_no\" value={phone_no} onChange={handleCourChange} type=\"text\" placeholder=\"Phone Number\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"email\" value={email} onChange={handleCourChange} type=\"email\" placeholder=\"Enter Email\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"password\" value={password} onChange={handleCourChange} type=\"password\" placeholder=\"Enter Password\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"retype-password\" value={duPass} onChange={(e) => setDupass(e.target.value)} type=\"password\" placeholder=\"Retype Password\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"check-policy\">\r\n                        <label htmlFor='cour_policy'>Check to Accept</label> \r\n                        <input name=\"cour_policy\"  checked={cour_policy} onChange={handleCourChange} type=\"checkbox\" />\r\n                        <Link to='courier-policy'>Read Courier Policy</Link>\r\n                    </div>\r\n                    <hr/>\r\n                        <input className=\"vendor-log-submit btn\" name=\"vendor-log-submit\" type=\"submit\" value=\"Register\" />\r\n                        <br/><Link style={{\"color\":\"rgb(219, 33, 76)\", \"fontWeight\":\"bold\"}} to=\"/courier\">Login Instead</Link>\r\n                </div>\r\n            </form>\r\n        </div>     \r\n    );\r\n}\r\n\r\nexport default RegisterCourier","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\RegisterCustomer.js",["191"],"import './styles/vendor.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { UseFetchJSON } from './useFetch';\r\nimport { useState } from 'react';\r\n// import CSRFTOKEN from './CSRFTOKEN';\r\n\r\n\r\n\r\nconst RegisterCustomer = () => {\r\n\r\n    const [dupPass, setDupPass] = useState(\"\");\r\n    const [cusalert, setCusAlert] = useState(\"\");\r\n    const [cussuccess, setCusSuccess] = useState(\"\");\r\n    const [customer, setCustomer] = useState({\r\n        \"first_name\": \"\",\r\n        \"last_name\": \"\",\r\n        \"country\": \"\",\r\n        \"state\": \"\",\r\n        \"street\": \"\",\r\n        \"phone_no\": \"\",\r\n        \"email\": \"\",\r\n        \"password\": \"\",\r\n        \"reg_date\": new Date().toISOString(),\r\n        \"is_email_verified\": false\r\n    });\r\n\r\n    const { first_name, last_name, country, state, street, phone_no, email, password, is_email_verified } = customer;\r\n\r\n    const handleCustomerChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        setCustomer({...customer, [name]:value});\r\n    }\r\n\r\n    const handleCustomerSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (first_name && last_name && country && state && street &&\r\n            phone_no && email && password) {\r\n                if (password === dupPass) {\r\n                    let apiURL = \"http://localhost:7000/parcel_customer/reg_customer/\";\r\n                    let result = UseFetchJSON(apiURL, \"POST\", customer);\r\n                    result.then((res) => {\r\n                        if (res.status === \"success\") {\r\n                            setCusSuccess(res.data);\r\n                        } else if (res.status === \"error\") {\r\n                            setCusAlert(res.data);\r\n                        }\r\n                    }).catch((err) => console.log(err));\r\n\r\n                } else {\r\n                    setCusAlert(\"Passwords do not match\");\r\n                }\r\n            } else {\r\n                setCusAlert(\"Some Fields are empty\");\r\n            }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Vendor-Frag\">\r\n            <form onSubmit={handleCustomerSubmit} className=\"container\">\r\n                <div className=\"input-container\">\r\n                    <legend className=\"Vendor-Log-Legend\" >Customer Registration Form</legend> <br/>\r\n                    {cusalert ? <div className='alert alert-danger alert-dismissible' role='alert'>\r\n                        <p style={{\"textAlign\": \"center\"}}>{cusalert}</p>\r\n                        <button className='close' role='alert' data-dismiss='alert' ><span>&times;</span></button>\r\n                    </div>: \"\"}\r\n                    {cussuccess ? <div className='alert alert-success alert-dismissible' role='alert'>\r\n                        <p style={{\"textAlign\": \"center\"}}>{cussuccess}</p>\r\n                        <button className='close' role='alert' data-dismiss='alert' ><span>&times;</span></button>\r\n                    </div> : \"\"}\r\n                    <div className=\"form-group\">\r\n                        <input name=\"first_name\" value={first_name} onChange={handleCustomerChange} type=\"text\" placeholder=\"First Name Here\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"last_name\" value={last_name} onChange={handleCustomerChange} type=\"text\" placeholder=\"Last Name Here\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"country\" value={country} onChange={handleCustomerChange} type=\"text\" placeholder=\"Country\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"state\" value={state} onChange={handleCustomerChange} type=\"text\" placeholder=\"State/Province\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"street\" value={street} onChange={handleCustomerChange} type=\"text\" placeholder=\"Street Address\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"phone_no\" value={phone_no} onChange={handleCustomerChange} type=\"text\" placeholder=\"Phone Number\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"email\" value={email} onChange={handleCustomerChange} type=\"email\" placeholder=\"Enter Email\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"password\" value={password} onChange={handleCustomerChange} type=\"password\" placeholder=\"Enter Password\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input name=\"retype-password\" value={dupPass} onChange={(e)=>setDupPass(e.target.value)} type=\"password\" placeholder=\"Retype Password\" className=\"form-control\" />\r\n                    </div>\r\n                        <input className=\"vendor-log-submit btn\" name=\"vendor-log-submit\" type=\"submit\" value=\"Register\" />\r\n                        <br/><Link style={{\"color\":\"rgb(219, 33, 76)\", \"fontWeight\":\"bold\"}} to=\"/customer\">Login Instead</Link>\r\n                </div>\r\n            </form>\r\n        </div>     \r\n    );\r\n}\r\n\r\nexport default RegisterCustomer","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\RegisterVendor.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\ProdDetailPage.js",["192","193","194","195"],"import { useEffect, useCallback, useRef, useContext, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport './styles/home.css';\r\n// import { Link } from 'react-router-dom';\r\n// import CSRFTOKEN from './CSRFTOKEN';\r\n// import { useState } from 'react';\r\n// import { UseFetch } from './useFetch';\r\n\r\n\r\nconst ProdDetailPage = () => {\r\n\r\n    // let history = useHistory();\r\n    let prodView = JSON.parse(localStorage.getItem('prodView'));\r\n    const [proderr, setProdErr] = useState(\"\");\r\n    const [prodsus, setProdSus] = useState(\"\");\r\n\r\n    let [prodqty, setProdQty] = useState(0);\r\n\r\n    let refresh = () => {\r\n        window.location.reload(false);\r\n    }\r\n\r\n    let history = useHistory();\r\n\r\n    // setInterval(() => {\r\n    //     refresh();\r\n    // }, 10000);\r\n\r\n    const incrementProd = () => {\r\n        // if (prodqty === isNaN) setProdQty(0);\r\n        setProdQty(parseInt(prodqty) + 1)\r\n    }\r\n\r\n    const decrementProd = () => {\r\n        // if (prodqty === isNaN) setProdQty(0);\r\n        if (prodqty > 0) setProdQty(parseInt(prodqty) - 1);\r\n        else setProdQty(0);\r\n    }\r\n\r\n    const handleBuyNow = () => {\r\n        if(prodView) {\r\n            let buySingle = {...prodView, purchased_qty:parseInt(prodqty)}\r\n            localStorage.setItem('buySingle', JSON.stringify(buySingle));\r\n            history.push('/single');\r\n\r\n        }\r\n    }\r\n\r\n    const handleRemoveFromCart = () => {\r\n        let cartStored = JSON.parse(localStorage.getItem('parcelCart')) || null;\r\n        if(cartStored) {\r\n            let prodRemoved =cartStored.filter((prod)=> prod.id === prodView.id);\r\n            if (prodRemoved.length === 1) {\r\n                let prodToReturn = cartStored.filter((prod)=> prod.id !== prodView.id);\r\n                localStorage.setItem('parcelCart', JSON.stringify(prodToReturn));\r\n                setProdSus('Product Removed!');\r\n                setProdQty(0);\r\n            } else setProdErr('Product was not in cart.');\r\n        }\r\n        refresh();\r\n    }\r\n\r\n    const handleAddToCart = async () => {\r\n        let cart = [];\r\n        let cartStored = await JSON.parse(localStorage.getItem('parcelCart')) || null;\r\n        if (cartStored) {\r\n            // for (let i=0; i<cartStored.length; i++) {\r\n            //     cart.push(cartStored[i]);\r\n            // }\r\n            let availProd = await cartStored.filter((item)=> item.id === prodView.id);\r\n            // let adjCart = await cartStored.map((item)=>{\r\n            //     if (item.id === prodView.id) {\r\n            //         if (prodqty) return {...item, purchased_qty:prodqty};\r\n            //         else return null;\r\n            //     } \r\n            //     console.log(item);\r\n            //     return \r\n            // });\r\n\r\n            console.log(availProd);\r\n            // console.log(adjCart);\r\n\r\n            let normCart = await cartStored.filter((item) => item.id !== prodView.id);\r\n            console.log(normCart);\r\n\r\n            if (normCart.length < cartStored.length) {\r\n                if(availProd && prodqty>0) {\r\n                    cart = [];\r\n                    let repProd = availProd[0];\r\n                    repProd = {...repProd, purchased_qty:parseInt(prodqty)}\r\n                    cart.push(repProd);\r\n                    if(normCart) cart.push(...normCart);\r\n                    console.log(cart);\r\n                    // localStorage.removeItem('parcelCart');\r\n                    localStorage.setItem('parcelCart', JSON.stringify(cart));\r\n                    setProdSus(`${prodView.prod_name} added to cart.`);\r\n                } else {\r\n                    setProdErr('Can not add zero qty to cart');\r\n                }\r\n            } else {\r\n                if(prodqty>0) {\r\n                    cart = [];\r\n                    cart.push(...normCart);\r\n                    cart.push({...prodView, purchased_qty:parseInt(prodqty)});\r\n                    // localStorage.removeItem('parcelCart');\r\n                    localStorage.setItem('parcelCart', JSON.stringify(cart));\r\n                    setProdSus(`${prodView.prod_name} added to cart.`);\r\n                } else {\r\n                    setProdErr('Can not add zero qty to cart');\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (prodqty>0) {\r\n                cart.push({...prodView, purchased_qty:parseInt(prodqty)});\r\n                localStorage.setItem('parcelCart', JSON.stringify(cart));\r\n                setProdSus(`${prodView.prod_name} added to cart.`);\r\n            } else {\r\n                setProdErr('Can not add zero qty to cart');\r\n            }\r\n        }\r\n        refresh();\r\n    }\r\n\r\n  \r\n       \r\n    useEffect(()=>{\r\n        let updateQty = JSON.parse(localStorage.getItem('parcelCart')) || null;\r\n        if(updateQty) {\r\n            for (let i=0; i<updateQty.length; i++) {\r\n                if(updateQty[i].id === prodView.id) {\r\n                    setProdQty(updateQty[i].purchased_qty);\r\n                }\r\n            }\r\n        }\r\n    },[prodView.id]);\r\n\r\n    // let parcelCart = JSON.parse(localStorage.getItem('parcelCart')) || null;\r\n \r\n    // let calcCart = useCallback(()=>{\r\n    //  if(parcelCart) {\r\n    //      let totItem = 0;\r\n    //      for (let i=0; i<parcelCart.length; i++) {\r\n    //          let num = parcelCart[i].purchased_qty;\r\n    //          totItem += num;\r\n    //      }\r\n    //      console.log(totItem);\r\n    //      let cartTot = {\"totItem\":totItem};\r\n    //      localStorage.setItem('cartTot', JSON.stringify(cartTot));\r\n    //  } \r\n    // },[parcelCart]); \r\n   \r\n    // useEffect(()=>{\r\n    //     calcCart();\r\n    // },[calcCart, parcelCart]);\r\n    \r\n   \r\n   \r\n    return (\r\n        <div className=\"container\"> <br/>\r\n             {proderr?(<div id='apiAlert' style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-danger alert-dismissible' role='alert'>\r\n                                    {proderr}\r\n                                    <button className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\" }\r\n             {prodsus?(<div id='apiAlert' style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-success alert-dismissible' role='alert'>\r\n                                    {prodsus}\r\n                                    <button className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\" }\r\n            <div className='view-detail'>\r\n                <img alt='avatar' className='img-thumbnail' src={prodView.prod_photo} />\r\n                <div className='view-content'>\r\n                            <p>{prodView.prod_desc}</p>\r\n                    <div className='prod-detail-ven-con'>\r\n                        <div className='prod-det'>\r\n                            <p className='badge'>{prodView.prod_name}</p> <br/>\r\n                            <p className='badge'>{prodView.prod_model}</p> <br/>\r\n                            <p className='badge'>Rating:</p> <br/>\r\n                            <p className='badge'>₦ {prodView.prod_price}</p>\r\n                        </div>\r\n                        <div className='vend-img-con'>\r\n                            <p className='badge'>Vendor</p>\r\n                            <img alt='avatar' style={{width:\"100%\", height:\"100%\"}} src={prodView.vend_photo}/>\r\n                            <p className='badge'>{prodView.vendor_name}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className='prod-qty'>\r\n                        <label className='badge'>Product Quantity</label> <br/>\r\n                        <div className='incr-btn'>\r\n                            <button style={{color:\"chartreuse\", fontSize:\"1.3em\"}}  onClick={decrementProd}  className='btn'>-</button> \r\n                            <input type='text' onChange={(e)=>setProdQty(e.target.value)} value={prodqty}/> \r\n                            <button style={{color:\"chartreuse\", fontSize:\"1.3em\"}}  onClick={incrementProd}  className='btn'>+</button> <br/>\r\n                        </div>\r\n                    </div> <br/>\r\n                    <div className='view-bottom'> \r\n                        <div className='check-btn'>\r\n                            <button onClick={handleBuyNow} className='btn'>Buy Now</button>\r\n                            <button onClick={handleAddToCart} className='btn'> Add to Cart </button>\r\n                            <button onClick={handleRemoveFromCart} className='btn'>Remove from Cart</button>\r\n                        </div>\r\n                    </div>      \r\n                </div> \r\n                  \r\n            </div>\r\n        </div>     \r\n    );\r\n}\r\n\r\nexport default ProdDetailPage","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\VendorDashBoard.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\Payment.js",["196","197"],"import { useEffect, useState } from 'react';\r\n// import { usePaystackPayment } from 'react-paystack';\r\nimport './styles/vendor.css';\r\nimport { UseFetchJSON } from './useFetch';\r\n// import { Link } from 'react-router-dom';\r\n// import CSRFTOKEN from './CSRFTOKEN';\r\n// import { useState } from 'react';\r\n// import { UseFetch } from './useFetch';\r\n\r\n\r\n// const config = {\r\n//     reference: (new Date()).getTime().toString(),\r\n//     email: \"isenewoephr2012@gmail.com\",\r\n//     amount: 200000,\r\n//     publicKey: \"sk_test_b2ffbedf2d7b2cf10229235415ba2dac551c684e\"\r\n// };\r\n\r\n// const onSuccess = (reference) => {\r\n//     console.log(reference);\r\n// }\r\n\r\n// const onClose = () => {\r\n//     console.log('closed');\r\n// }\r\n\r\n// const PaystackHookExample = () => {\r\n//     const initializePayment = usePaystackPayment(config);\r\n\r\n//     return (\r\n//         <div>\r\n//             <button className='btn' onClick={()=>initializePayment(onSuccess, onClose)}>\r\n//                 InitPay\r\n//             </button>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\nconst Payment = () => {\r\n\r\n    const [showProvider, setShowProvider] = useState(false);\r\n    const [showTxnRef, setShowTxnRef] = useState(false);\r\n    const [showShipTxnRef, setShowShipTxnRef] = useState(false);\r\n    const [showPayDeliv, setShowPayDeliv] = useState(false);\r\n    const [showShipProv, setShowShipProv] = useState(false);\r\n    const [customerId, setCustomerId] = useState(0);\r\n    const [isCustomer, setIsCustomer] = useState(false);\r\n    const [proderr, setProdErr] = useState(\"\");\r\n    const [prodsus, setProdSus] = useState(\"\");\r\n\r\n    let curOrder = JSON.parse(localStorage.getItem('curOrder')) || null;\r\n\r\n    const [payment, setPayment] = useState({\r\n        \"shipping_fee\": \"\",\r\n        \"amount\": \"\",\r\n        \"grand_total_amount\": \"\",\r\n        \"payment_type\": \"\",\r\n        \"shipping_pay_type\": \"\",\r\n        \"provider\": \"\",\r\n        \"shipping_provider\": \"\",\r\n        \"txn_ref\": \"\",\r\n        \"shipping_txn_ref\": \"\"\r\n    });\r\n\r\n    const { shipping_fee, shipping_provider, shipping_pay_type, amount, txn_ref, shipping_txn_ref, grand_total_amount, payment_type, provider } = payment;\r\n\r\n    const handlePaymentFormChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        setPayment({...payment, [name]:value})\r\n    }\r\n\r\n    console.log(customerId);\r\n    console.log(isCustomer);\r\n    \r\n    const handlePayClick = (e) => {\r\n        e.preventDefault();\r\n        let payUrl = \"http://localhost:8080/v1/initializetransaction\";\r\n        let amount = grand_total_amount * 100;\r\n        let email = \"\";\r\n        let anonCusUrl = `http://localhost:7000/parcel_customer/get_anon_customer/${customerId}/`;\r\n        let cusUrl = `http://localhost:7000/parcel_customer/get_customer/${customerId}/`;\r\n\r\n        if(isCustomer) {\r\n            let data = UseFetchJSON(cusUrl, 'GET');\r\n            data.then((res)=> {\r\n                if(res.status === \"success\") {\r\n                    email = res.data.email;\r\n                    console.log(email);\r\n\r\n                   let payData = {\r\n                        \"email\": email,\r\n                        \"amount\": amount,\r\n                        \"callback_url\": \"http://localhost:3000/verify\"\r\n                    }\r\n\r\n                    let initPay = UseFetchJSON(payUrl, 'POST', payData);\r\n                    initPay.finally(() => setProdSus(\"Processing your payment...\"))\r\n                    .then(async (res) => {\r\n                        let auth_url = await res.data.authorization_url;\r\n                        let reference = await res.data.reference;\r\n                        localStorage.setItem(\"payRef\", reference);\r\n                        let updateData = {\r\n                            \"shipping_fee\": shipping_fee,\r\n                            \"grand_total_amount\": grand_total_amount,\r\n                            \"reference\": reference,\r\n                            \"updated_at\": new Date().toISOString()\r\n                        }\r\n                        let updateUrl = `http://localhost:7000/parcel_order/payment_update/${curOrder}/`;\r\n                        let updatePayDetail = UseFetchJSON(updateUrl, 'PATCH', updateData);\r\n\r\n                        updatePayDetail.then((mess) => {\r\n                            if (mess.status === \"success\") {\r\n                                window.location = auth_url;\r\n                            } else {\r\n                                setProdErr(\"Error occured, order might have expired\");\r\n                            }\r\n                        });\r\n                        \r\n                    }).catch((err) => {\r\n                        if (err) {\r\n                            setProdSus(\"\");\r\n                            setProdErr(\"Unable to connect with payment API\");\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        } else if (isCustomer === false) {\r\n            let data = UseFetchJSON(anonCusUrl, 'GET');\r\n            data.then((res)=> {\r\n                if(res.status === \"success\") {\r\n                    email = res.data.email;\r\n                    console.log(email);\r\n                   let payData = {\r\n                        \"email\": email,\r\n                        \"amount\": amount,\r\n                        \"callback_url\": \"http://localhost:3000/verify\"\r\n                    }\r\n                    let initPay = UseFetchJSON(payUrl, 'POST', payData);\r\n                    initPay.finally(() => setProdSus(\"Processing your payment...\"))\r\n                    .then( async (res) => {\r\n                        let auth_url = await res.data.authorization_url;\r\n                        let reference = await res.data.reference;\r\n                        localStorage.setItem(\"payRef\", reference);\r\n                        let updateData = {\r\n                            \"shipping_fee\": shipping_fee,\r\n                            \"grand_total_amount\": grand_total_amount,\r\n                            \"reference\": reference,\r\n                            \"updated_at\": new Date().toISOString()\r\n                        }\r\n                        let updateUrl = `http://localhost:7000/parcel_order/payment_update/${curOrder}/`;\r\n                        let updatePayDetail = UseFetchJSON(updateUrl, 'PATCH', updateData);\r\n\r\n                        updatePayDetail.then((mess) => {\r\n                            if (mess.status === \"success\") {\r\n                                window.location = auth_url;\r\n                            } else {\r\n                                setProdErr(\"Error occured, order might have expired\");\r\n                            }\r\n                        });\r\n                    }).catch((err) =>  {\r\n                        if (err) {\r\n                            setProdSus(\"\");\r\n                            setProdErr(\"Unable to connect with payment API\");\r\n                        }\r\n                    });\r\n                }\r\n            });  \r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if (payment_type === \"Card Payment\") setShowProvider(true);\r\n        else setShowProvider(false);\r\n\r\n        if (payment_type === \"Bank Transfer\") setShowTxnRef(true);\r\n        else setShowTxnRef(false);\r\n\r\n        if (payment_type === \"Bank Transfer On Delivery\") setShowPayDeliv(true);\r\n        else setShowPayDeliv(false);\r\n    },[payment_type]);\r\n\r\n    useEffect(()=>{\r\n        if (shipping_pay_type === \"Card Payment for Shipping\") setShowShipProv(true);\r\n        else setShowShipProv(false);\r\n\r\n        if (shipping_pay_type === \"Bank Transfer for Shipping\") setShowShipTxnRef(true);\r\n        else setShowShipTxnRef(false);\r\n    },[shipping_pay_type]);\r\n\r\n    useEffect(()=>{\r\n        if (curOrder) {\r\n            let payUrl = `http://localhost:7000/parcel_order/get_order_id/${curOrder}`;\r\n            let setPayDetail = UseFetchJSON(payUrl, 'GET');\r\n            setPayDetail.then((res) => {\r\n                if (res.status === \"success\") {\r\n                    setPayment({...payment, shipping_fee:res.data.shipping_fee, \r\n                        amount:res.data.total_price, grand_total_amount:(res.data.shipping_fee + res.data.total_price)});\r\n                        setCustomerId(res.data.customer_id);\r\n                        setIsCustomer(res.data.is_customer);\r\n                }\r\n            });\r\n        }\r\n    },[curOrder]);\r\n\r\n\r\n   \r\n    return (\r\n        <div className=\"payment-frag\">\r\n              {proderr?(<div id='apiAlert' style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-danger alert-dismissible' role='alert'>\r\n                                    {proderr}\r\n                                    <button className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\" }\r\n                    {prodsus?(<div  style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-success alert-dismissible' role='alert'>\r\n                                    {prodsus}\r\n                                    <button  className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\"}\r\n\r\n            <form className='form'>\r\n                <div className='form-group'>\r\n                    <input name='shipping_fee' type='text' readOnly=\"readonly\" value={\"Shipping Fee = \" + shipping_fee} className=\"form-control\"/>\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input name='amount' type='text' readOnly=\"readonly\" value={\"Amount = \" + amount} className=\"form-control\"/>\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input name='grand_total_amount' type='text' readOnly=\"readonly\" value={\"Grand Total Amount = \" + grand_total_amount} className=\"form-control\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <select name='payment_type' value={payment_type} onChange={handlePaymentFormChange} className='form-control'>\r\n                        <option>Select Payment Type</option>\r\n                        <option>Card Payment</option>\r\n                        <option>Bank Transfer</option>\r\n                        <option>Bank Transfer On Delivery</option>\r\n                    </select>\r\n                </div>\r\n                {showProvider?(<div className=\"form-group\">\r\n                    <select name='provider' onChange={handlePaymentFormChange} className='form-control'>\r\n                        <option>Select Provider</option>\r\n                        <option>Master Card</option>\r\n                        <option>Verve Card</option>\r\n                        <option>Visa Card</option>\r\n                    </select>\r\n                    <input type='submit' value=\"Pay\" onClick={handlePayClick} />\r\n                </div>):\"\"}\r\n                {showTxnRef?(<div className='form-group'>\r\n                    <label className='form-control'>\r\n                        Account No: 3073566093 \r\n                    </label>\r\n                    <label className='form-control'>\r\n                        Bank: First Bank\r\n                    </label>\r\n                    <input name='txn_ref' value={txn_ref} onChange={handlePaymentFormChange} className=\"form-control\" placeholder='Enter Transaction Reference' />\r\n                    <br/>\r\n                    <input type='submit' value=\"Submit\" className='form-control'/>\r\n                </div>):\"\"}\r\n                {showPayDeliv?(<div className=\"form-group\">                    \r\n                    <div className='form-group'>\r\n                        <select name='shipping_pay_type' value={shipping_pay_type} onChange={handlePaymentFormChange} className='form-control'>\r\n                            <option>Select Payment Type for Shipping Fee</option>\r\n                            <option>Card Payment for Shipping</option>\r\n                            <option>Bank Transfer for Shipping</option>                            \r\n                        </select>\r\n                    </div>\r\n                    {showShipProv?(<div className='form-group'>\r\n                        <select name='shipping_provider' value={shipping_provider} onChange={handlePaymentFormChange} className='form-control'>\r\n                            <option>Select Provider</option>\r\n                            <option>Master Card</option>\r\n                            <option>Verve Card</option>\r\n                            <option>Visa Card</option>\r\n                        </select>\r\n                    </div>):\"\"}\r\n                    {showShipTxnRef?(<div className='form-group'>\r\n                    <label className='form-control'>\r\n                        Account No: 3073566093 \r\n                    </label>\r\n                    <label className='form-control'>\r\n                        Bank: First Bank\r\n                    </label>\r\n                    <input name='shipping_txn_ref' value={shipping_txn_ref} onChange={handlePaymentFormChange} className=\"form-control\" placeholder='Enter Transaction Reference' />\r\n                    <br/>\r\n                    <input type='submit' value=\"Submit\" className='form-control'/>\r\n                </div>):\"\"}\r\n                </div>):\"\"}\r\n            </form>\r\n              {/* <PaystackHookExample/> */}\r\n        </div>     \r\n    );\r\n}\r\n\r\nexport default Payment","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\SingleProdCheckOutPage.js",["198"],"import './styles/vendor.css';\r\n// import { Link } from 'react-router-dom';\r\n// import CSRFTOKEN from './CSRFTOKEN';\r\nimport { useEffect, useState } from 'react';\r\nimport { savesingleorder } from './savesingleorder';\r\nimport { useHistory } from 'react-router-dom';\r\n// import { UseFetch } from './useFetch';\r\n\r\n\r\nconst SingleProdCheckOutPage = () => {\r\n\r\n    let buySingle = JSON.parse(localStorage.getItem('buySingle'));\r\n\r\n    let history = useHistory();\r\n\r\n    let refresh = () => {\r\n        window.location.reload(false);\r\n    }\r\n\r\n\r\n    let cartItems = JSON.parse(localStorage.getItem('parcelCart')) || null;\r\n    let logcus = JSON.parse(localStorage.getItem('logcus')) || null;\r\n    const [totPrice, setTotPrice] = useState();\r\n    const [proderr, setProdErr] = useState(\"\");\r\n    const [prodsus, setProdSus] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        if (buySingle) {\r\n            let t_price = buySingle.prod_price * buySingle.purchased_qty;\r\n            setTotPrice(t_price);\r\n        }\r\n    },[buySingle, totPrice]);\r\n\r\n    let cartTot = buySingle ? buySingle.purchased_qty : 0;\r\n    console.log(cartTot);\r\n\r\n\r\n    const [cartUser, setCartUser] = useState({\r\n        \"first_name\": \"\",\r\n        \"last_name\": \"\",\r\n        \"country\": \"\",\r\n        \"state\": \"\",\r\n        \"shipping_method\": \"\",\r\n        \"street\": \"\",\r\n        \"phone_no\": \"\",\r\n        \"email\": \"\",\r\n        \"zip_code\": \"\",\r\n        \"reg_date\": new Date().toISOString()\r\n    });\r\n   \r\n    const { first_name, last_name, country, state, shipping_method, zip_code,\r\n        street, phone_no, email, reg_date } = cartUser;\r\n\r\n        let customer_name = last_name + \" \" + first_name;\r\n\r\n        const handleCartFormChange = (e) => {\r\n            e.preventDefault();\r\n            let name = e.target.name;\r\n            let value = e.target.value;\r\n            setCartUser({...cartUser, [name]:value})\r\n        }\r\n\r\n\r\n        const handleSingleOrderClick = (e) => {\r\n            e.preventDefault();\r\n            savesingleorder(first_name, last_name, country, state,\r\n            shipping_method, zip_code, street, phone_no, email, \r\n            reg_date, logcus, cartTot, totPrice, buySingle,\r\n            customer_name, setProdSus, setProdErr, history);\r\n        }\r\n    \r\n        const handleChangeQty = (e) => {\r\n            if (buySingle) {\r\n                        let value = e.target.value;\r\n                        let newCartVal = {...buySingle, purchased_qty:parseInt(value)};\r\n                        localStorage.setItem('buySingle', JSON.stringify(newCartVal));\r\n                        refresh();\r\n                    }\r\n            }\r\n        \r\n     \r\n   \r\n    return (\r\n        <div className=\"Vendor-Frag\">\r\n             {proderr?(<div id='apiAlert' style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-danger alert-dismissible' role='alert'>\r\n                                    {proderr}\r\n                                    <button className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\" }\r\n                    {prodsus?(<div  style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-success alert-dismissible' role='alert'>\r\n                                    {prodsus}\r\n                                    <button  className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\"}\r\n\r\n            <div className='single-check-con'>\r\n                <div className='shipping-info'>\r\n                        <p id='shipping-head' className='badge order-frag-head'>Shipping Info</p>\r\n                        <form className='form container'>\r\n                            <div className='form-group'>\r\n                                <input type='text' name='first_name' value={logcus?logcus.first_name:first_name} onChange={handleCartFormChange} className='form-control check-input' placeholder='First Name'/>\r\n                            </div>\r\n                            <div className='form-group'>\r\n                                <input type='text' name='last_name' value={logcus?logcus.last_name:last_name} onChange={handleCartFormChange} className='form-control check-input' placeholder='Last Name'/>\r\n                            </div>\r\n                            <div className='form-group'>\r\n                                <select className='form-control check-input' name=\"shipping_method\" value={shipping_method} onChange={handleCartFormChange}>\r\n                                    <option>Shipping_Method</option>\r\n                                    <option>Delivery</option>\r\n                                    <option>Pick up</option>\r\n                                </select>\r\n                            </div>\r\n                            <div className='form-group'>\r\n                                <input type='text' name='street' value={logcus?logcus.street:street} onChange={handleCartFormChange} className='form-control check-input' placeholder='Street'/>\r\n                            </div>\r\n                            <div className='form-group'>\r\n                                <input type='text' name='state' value={logcus?logcus.state:state} onChange={handleCartFormChange} className='form-control check-input' placeholder='State'/>\r\n                            </div>\r\n                            <div className='form-group'>\r\n                                <input type='text' name='country' value={logcus?logcus.country:country} onChange={handleCartFormChange} className='form-control check-input' placeholder='Country'/>\r\n                            </div>\r\n                            <div className='form-group'>\r\n                                <input type='text' name='zip_code' value={zip_code} onChange={handleCartFormChange} className='form-control check-input' placeholder='Zip Code'/>\r\n                            </div>\r\n                            <p style={{marginLeft:\"10px\"}}  className='badge order-frag-head'>Contact Info</p>\r\n                            <div className='form-group'>\r\n                                <input type='text' name='email' value={logcus?logcus.email:email} onChange={handleCartFormChange} className='form-control check-input' placeholder='E-mail Address'/>\r\n                            </div>\r\n                            <div className='form-group'>\r\n                                <input type='text' name='phone_no' value={logcus?logcus.phone_no:phone_no} onChange={handleCartFormChange} className='form-control check-input' placeholder='Phone Number'/>\r\n                            </div>\r\n                            <div className='check-btn-fin'>\r\n                                <button onClick={handleSingleOrderClick} className='btn'>Proceed to Payment</button>\r\n                            </div>\r\n                        </form>\r\n                </div> \r\n                <div className='order-summary'>\r\n                    <p  className='badge order-frag-head'>Order Summary</p>\r\n                    \r\n                    <div className='order-frag' >\r\n                        <img alt='cart-avatar' src={buySingle.prod_photo} className=\"img-thumbnail\"/>\r\n                        <div className='order-frag-panel'>\r\n                            <p className='badge'>{buySingle.prod_name}</p>\r\n                            <p className='badge'>{buySingle.prod_model}</p>\r\n                            <p className='badge'>₦ {buySingle.prod_price}</p>\r\n                            <label className='badge'>Qty: <input style={{textAlign:\"center\"}} onChange={handleChangeQty} id='cart-item-qty' type=\"number\" name=\"cart-item-qty\" value={buySingle.purchased_qty}/></label>\r\n                            <p className='badge'>Tot: ₦ {buySingle.prod_price * buySingle.purchased_qty}</p>\r\n                           \r\n                        </div>\r\n                        <hr/>\r\n                    </div>\r\n                        <p style={{fontSize:\"1.2em\"}} className='badge'>G.Total: ₦ {totPrice}</p>\r\n                </div>\r\n            </div>\r\n        </div>     \r\n    );\r\n}\r\n\r\nexport default SingleProdCheckOutPage","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CartCheckOut.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CourierDeals.js",["199","200"],"import './styles/vendor.css';\r\nimport './styles/courier.css';\r\n// import { Link } from 'react-router-dom';\r\n// import CSRFTOKEN from './CSRFTOKEN';\r\nimport { useState, useEffect, useReducer, useCallback } from 'react';\r\nimport { UseFetch, UseFetchJSON } from './useFetch';\r\n\r\n\r\nconst CourierDeals = () => {\r\n\r\n    const [prodsus, setProdSus] = useState(\"\");\r\n    const [proderr, setProdErr] = useState(\"\");\r\n    const [loadDeals, setLoadDeals] = useState(true);\r\n\r\n    let loggedCour = JSON.parse(localStorage.getItem('logcour')) || null;\r\n    console.log(loggedCour);\r\n\r\n\r\n    \r\n   const initialDeals = {\r\n       \"deals\": []\r\n   }\r\n\r\n   const getDeals = useCallback((data) => {\r\n    return dispatch({\r\n        type: \"GET_DEALS\",\r\n        payload: data,\r\n    });\r\n  }, []);\r\n\r\n  const acceptDeal = (id) => {\r\n      return dispatch({\r\n          type: \"ACCEPT_DEAL\",\r\n          payload: id\r\n        });\r\n  }\r\n\r\n  const handleAcceptClick = (param) => {\r\n      acceptDeal(param);\r\n  }\r\n\r\n   const reducer = (state=initialDeals, action) => {\r\n       if(action.type === \"GET_DEALS\") {\r\n           let revDeal = action.payload.filter((item) => item.handled_dispatch === false);\r\n        return {...state, deals: revDeal} \r\n       }\r\n\r\n       if(action.type === \"ACCEPT_DEAL\") {\r\n           state.deals.map((item) => {\r\n               if (item.order_id === action.payload) {\r\n                   if(loggedCour) {\r\n                       let detail = {\r\n                           \"handled_dispatch\": true,\r\n                           \"courier_id\": loggedCour.id,\r\n                           \"courier_name\": loggedCour.last_name + \" \" + loggedCour.first_name,\r\n                           \"courier_email\": loggedCour.email,\r\n                           \"courier_phone\": loggedCour.phone_no,\r\n                           \"updated_at\": new Date().toISOString()\r\n                       }\r\n\r\n                       let apiUrl = `http://localhost:7000/parcel_dispatch/update_dispatch/${action.payload}/`;\r\n                       let data = UseFetchJSON(apiUrl, 'PATCH', detail);\r\n                       data.then((res) => {\r\n                           if (res.status === \"success\") {\r\n                               setProdSus(res.data);\r\n                               setLoadDeals(true);\r\n                            }\r\n                        }).catch((err) => console.log(err.message));\r\n                    }\r\n                }\r\n                \r\n                let filteredDeals = state.deals.filter((sample) => sample.order_id !== action.payload);\r\n                return {...state, deals:filteredDeals}\r\n           });\r\n           return {...state}\r\n       }\r\n\r\n       return state;\r\n   }\r\n\r\n   useEffect(()=>{        \r\n    const fetchDeals = () => {\r\n        let apiUrl = 'http://localhost:7000/parcel_dispatch/get_dispatch_from_db/'; \r\n        let data = UseFetchJSON(apiUrl, 'GET');\r\n        data.then((res) => {\r\n            let deals = res.deals;\r\n            getDeals(deals);\r\n        }).catch((err) => console.log(err.message));\r\n    }\r\n    if(loadDeals) {\r\n        fetchDeals();\r\n    }\r\n    setLoadDeals(false);\r\n},[getDeals, loadDeals]);\r\n\r\n\r\n   const [state, dispatch] = useReducer(reducer, initialDeals);\r\n   console.log(state);\r\n\r\n\r\n    return (\r\n        <div>\r\n             {proderr?(<div id='apiAlert' style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-danger alert-dismissible' role='alert'>\r\n                                    {proderr}\r\n                                    <button className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\" }\r\n             {prodsus?(<div id='apiAlert' style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-success alert-dismissible' role='alert'>\r\n                                    {prodsus}\r\n                                    <button className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\" }\r\n            <p id='courierDealHeading'>Click 'Accept' to execute a deal</p>\r\n            <p id='deal-count'>There are {state.deals.length} deals available</p>\r\n            <div>\r\n                {state.deals.map((item, key) => {\r\n                    return (\r\n                        <div className='delivery-frag' key={item.order_id}>\r\n                            <div className='info-container'>\r\n                                <div className='customer-info'>\r\n                                    <strong>Customer's Info:</strong>\r\n                                    <ul>\r\n                                        <li className='delivery-para'> <strong>{item.customer_name}</strong></li>\r\n                                        <li className='delivery-para'> {item.address}</li>\r\n                                        <li className='delivery-para'> {item.phone_no}</li>\r\n                                        <li className='delivery-para'> <strong>Order Id: </strong>{item.order_id}</li>\r\n                                    </ul>\r\n                                </div>\r\n                                <div className='customer-info'>\r\n                                    <div><strong>Vendors' Info:</strong> {item.products.map((prod, key) => {\r\n                                        return (\r\n                                            <div key={prod.product_id}>\r\n                                                <ul>\r\n                                                    <li><strong>{prod.vendor_name}</strong></li>\r\n                                                    <li><strong className={prod.is_supply_ready?\"delivery-yes\":\"delivery-no\"}>{prod.is_supply_ready?\"Supply is ready\":\"Supply not ready\"}</strong></li>\r\n                                                    <li>{prod.vendor_address}</li>\r\n                                                    <li>{prod.vendor_phone}</li>\r\n                                                    <li><strong>Order Id: </strong>{prod.order_id}</li>\r\n                                                </ul>\r\n                                            </div>\r\n                                        )\r\n                                    })}</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className='btn-frag'>\r\n                                <button onClick={() => handleAcceptClick(item.order_id)} className='btn'>Accept</button>\r\n                            </div>\r\n\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>     \r\n    );\r\n}\r\n\r\nexport default CourierDeals","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CourierResolutions.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\VendResolutions.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CourierTransactions.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\CourierDispatch.js",["201"],"import './styles/vendor.css';\r\nimport './styles/courier.css';\r\n// import { Link } from 'react-router-dom';\r\n// import CSRFTOKEN from './CSRFTOKEN';\r\nimport { useState, useEffect, useReducer, useCallback } from 'react';\r\nimport { UseFetchJSON, UseFetch } from './useFetch';\r\n\r\n\r\nconst CourierDispatch = () => {\r\n\r\n    // const [dispatchProd, setDispatchProd] = useState({\r\n    //     \"is_delivered\": false\r\n    // });\r\n\r\n    const [prodsus, setProdSus] = useState();\r\n    const [proderr, setProdErr] = useState();\r\n \r\n    let loggedCour = JSON.parse(localStorage.getItem('logcour')) || null;\r\n\r\n    const initialDispatchables = {\r\n        \"dispatchables\": []\r\n    }\r\n\r\n    const getDispatchables = useCallback((data) => {\r\n        return dispatch({\r\n            type: \"GET_DISPATCHABLES\",\r\n            payload: data\r\n        });\r\n    }, []);\r\n\r\n    const handleIsDelivered = (e, order_id, product_id) => {\r\n        return dispatch({\r\n            type: \"SUBMIT_IS_DELIVERED\",\r\n            payload: {\"e\":e, \"order_id\": order_id, \"product_id\": product_id}\r\n        });\r\n    }\r\n\r\n    const handleSupplyReceived = (e, order_id, product_id) => {\r\n        return dispatch({\r\n            type: \"SUBMIT_SUPPLY_RECEIVED\",\r\n            payload: {\"e\":e, \"order_id\": order_id, \"product_id\": product_id}\r\n        });\r\n    }\r\n\r\n    const reducer = (state, action) => {\r\n\r\n        if(action.type === \"GET_DISPATCHABLES\") {\r\n            let setData = action.payload.filter((data) => data.courier_email === loggedCour.email);\r\n            return {...state, dispatchables: setData}\r\n        }\r\n\r\n        if(action.type === \"SUBMIT_IS_DELIVERED\") {\r\n            let newState = state.dispatchables.map((item) => {\r\n                if (item.order_id === action.payload.order_id) {\r\n                    item.products.map((prod) => {\r\n                        if (prod.product_id === action.payload.product_id) {\r\n                            let order_id = action.payload.order_id;\r\n                            let product_id = action.payload.product_id;\r\n                            let e = action.payload.e;\r\n                            let checked = e.target.checked;\r\n                            prod.is_delivered = checked;\r\n                            let detail = {\r\n                                \"is_delivered\": checked,\r\n                                \"updated_at\": new Date().toISOString()\r\n                            }\r\n                            let apiUrl = `http://localhost:7000/parcel_dispatch/update_dispatched_product/${order_id}/${product_id}/`;\r\n                            let data = UseFetchJSON(apiUrl, 'PATCH', detail);\r\n                            data.then((res) => {\r\n                                if (res.status === 'success') {\r\n                                    setProdSus(res.data)\r\n                                }\r\n                            }).catch((err) => console.log(err.message));\r\n                            return prod;\r\n                        }\r\n                        return { ...prod }\r\n                    });\r\n                    return { ...item }\r\n                }\r\n                return { ...item }\r\n            });\r\n            return { ...state, dispatchables: newState }\r\n        }\r\n\r\n\r\n        if(action.type === \"SUBMIT_SUPPLY_RECEIVED\") {\r\n            let newState = state.dispatchables.map((item) => {\r\n                if (item.order_id === action.payload.order_id) {\r\n                    item.products.map((prod) => {\r\n                        if (prod.product_id === action.payload.product_id) {\r\n                            let order_id = action.payload.order_id;\r\n                            let product_id = action.payload.product_id;\r\n                            let e = action.payload.e;\r\n                            let checked = e.target.checked;\r\n                            prod.is_supply_received = checked;\r\n                            let formData = new FormData();\r\n                            formData.append(\"is_supply_received\", checked);\r\n                            formData.append(\"updated_at\", new Date().toISOString());\r\n                            let apiUrl = `http://localhost:7000/parcel_dispatch/update_received_product/${order_id}/${product_id}/`;\r\n                            let data = UseFetch(apiUrl, 'POST', formData);\r\n                            data.then((res) => {\r\n                                if (res.status === 'success') {\r\n                                    setProdSus(res.data)\r\n                                }\r\n                            }).catch((err) => console.log(err.message));\r\n                            return prod;\r\n                        }\r\n                        return { ...prod }\r\n                    });\r\n                    return { ...item }\r\n                }\r\n                return { ...item }\r\n            });\r\n            return { ...state, dispatchables: newState }\r\n        }\r\n\r\n        return state;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchDispatchable = () => {\r\n            let apiUrl = 'http://localhost:7000/parcel_dispatch/get_dispatch_from_db/'; \r\n            let data = UseFetchJSON(apiUrl, 'GET');\r\n            data.then((res) => {\r\n                let deals = res.deals;\r\n                getDispatchables(deals);\r\n            }).catch((err) => console.log(err.message));\r\n        }\r\n\r\n        fetchDispatchable();\r\n\r\n    }, [getDispatchables]);\r\n\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialDispatchables);\r\n    console.log(state);\r\n    \r\n   \r\n    return (\r\n        <div>\r\n            <p style={{textAlign:\"center\", fontWeight:\"bold\", marginTop:\"10px\"}}>You have {state.dispatchables.length} Orders to dispatch</p>\r\n\r\n            {proderr?(<div id='apiAlert' style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-danger alert-dismissible' role='alert'>\r\n                                    {proderr}\r\n                                    <button className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\" }\r\n             {prodsus?(<div id='apiAlert' style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-success alert-dismissible' role='alert'>\r\n                                    {prodsus}\r\n                                    <button className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\" }\r\n            {state.dispatchables.map((item) => {\r\n                return (\r\n                    <div className='dispatch-item-container' key={item.order_id}>\r\n                        <div className='dispatch-customer-detail'>\r\n                            <div><strong>Customer: </strong>{item.customer_name}</div>\r\n                            <div><strong>Address: </strong>{item.address}</div>\r\n                            <div><strong>Phone: </strong>{item.phone_no}</div>\r\n                            <div><strong>Total Items: </strong>{item.total_items}</div>\r\n                            <div><strong>Total Amount:  </strong> ₦ {item.total_price}</div>\r\n                            <div className={item.is_delivered?\"delivery-yes\":\"delivery-no\"}>\r\n                                <strong style={{color:\"black\"}}>Status: </strong>\r\n                                {item.is_delivered?\"Delivered\":\"Pending\"}\r\n                            </div>\r\n                        </div>\r\n                        <div className='dispatch-product-detail'>\r\n                            {item.products.map((prod) => {                               \r\n                                return (\r\n                                    <div className='dispatch-prod-container' key={prod.product_id}>\r\n                                        <div className='dispatch-img-container'>\r\n                                            <img className='img-thumbnail dispatch-prod-img' src={prod.prod_photo} alt='prod-img' />\r\n                                        </div>\r\n                                        <div className='dispatch-prod-info'>\r\n                                            <div><strong>Vendor: </strong> {prod.vendor_name}</div>\r\n                                            <div><strong>Phone: </strong> {prod.vendor_phone}</div>\r\n                                            <div><strong>Address: </strong> {prod.vendor_address}</div>\r\n                                            <div><strong>Order Id: </strong> {prod.order_id}</div>\r\n                                            <div><strong>Product: </strong> {prod.product_name}</div>\r\n                                            <div><strong>Model: </strong> {prod.prod_model}</div>\r\n                                            <div><strong>Price: </strong> ₦ {prod.prod_price}</div>\r\n                                            <div><strong>Qty: </strong> {prod.quantity}</div>\r\n                                            <div><strong>Amount: </strong> ₦ {prod.total_amount}</div>\r\n                                            <div className={prod.is_supply_ready?'delivery-yes':'delivery-no'}><strong style={{color:\"black\"}}>Supply Status: </strong>{prod.is_supply_ready?\"Ready\":\"Pending\"}</div>\r\n                                            <div><strong>I received supply: </strong><input onChange={(e) => handleSupplyReceived(e, prod.order_id, prod.product_id)} type='checkbox' checked={prod.is_supply_received}  /></div>\r\n                                            <div className={prod.is_received?'delivery-yes':'delivery-no'}><strong style={{color:\"black\"}}>Customer Response: </strong>{prod.is_received?\"Received\":\"Pending\"}</div>\r\n                                            <div><strong>I delivered this: </strong><input onChange={(e) => handleIsDelivered(e, prod.order_id, prod.product_id)} type='checkbox' checked={prod.is_delivered}  /></div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}            \r\n        </div>     \r\n    );\r\n}\r\n\r\nexport default CourierDispatch","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\VendProducts.js",["202","203"],"import { useEffect, useReducer, memo, useCallback, Fragment, useRef, useState } from 'react';\r\nimport './styles/product.css';\r\nimport './styles/vendor.css';\r\nimport { UseFetch, UseFetchJSON } from './useFetch';\r\n// import { Link } from 'react-router-dom';\r\n// import CSRFTOKEN from './CSRFTOKEN';\r\n// import { useState } from 'react';\r\n// import { UseFetch } from './useFetch';\r\n\r\n\r\nconst VendProducts = () => {\r\n\r\n    const [produpload, setProdUpload] = useState(false);\r\n    const [viewprod, setViewProd] = useState(false);\r\n    const [uploadnote, setUploadNote] = useState(false);\r\n    const [prodphoto, setProdPhoto] = useState(null);\r\n    const [tempProd, setTempProd] = useState([]);\r\n    const [product, setProduct] = useState({\r\n        \"prod_name\": \"\",\r\n        \"prod_model\": \"\",\r\n        \"prod_price\": \"\",\r\n        \"prod_qty\": \"\",\r\n        \"prod_desc\": \"\",\r\n        \"prod_disc\": \"\"\r\n    });\r\n\r\n    const [editprod, setEditProd] = useState({\r\n        \"edit_price\": \"\",\r\n        \"edit_disc\": \"\",\r\n        \"edit_qty\": \"\"\r\n    });\r\n\r\n    const [prodsus, setProdSus] = useState(\"\");\r\n    const [proderr, setProdErr] = useState(\"\");\r\n\r\n    const handleProdEditChange =  useCallback((id, e) => {\r\n        return dispatch({\r\n            type: \"CHANGE_PROD\",\r\n            payload: {\"id\": id, \"e\": e}\r\n        });\r\n      },[]);  \r\n\r\n    const handleProdDelete =  useCallback((id) => {\r\n        return dispatch({\r\n            type: \"DELETE_PROD\",\r\n            payload: id\r\n        });\r\n      },[]);  \r\n\r\n    const initialState = {\r\n        \"products\": null\r\n    }\r\n    \r\n\r\n    const { prod_name, prod_model, prod_price, prod_qty, prod_desc, prod_disc } = product;\r\n    const handleProdUpload = () => {\r\n        setProdUpload(true);\r\n        setViewProd(false);\r\n        setUploadNote(false);\r\n    }\r\n\r\n\r\n    const handleEditClick =  useCallback((id) => {\r\n      return dispatch({\r\n          type: \"EDIT\",\r\n          payload: id,\r\n      });\r\n    },[]);\r\n\r\n    const getProducts = useCallback((data) => {\r\n      return dispatch({\r\n          type: \"GET_PRODUCTS\",\r\n          payload: data,\r\n      });\r\n    },[]);\r\n   \r\n\r\n    const handleSubmitClick = useCallback((id) => {\r\n        return dispatch({\r\n            type: \"SUBMIT_EDITTED\",\r\n            payload: id,\r\n        });\r\n      },[]);\r\n\r\n    const reducer = (state, action) => {\r\n\r\n        if (action.type === \"GET_PRODUCTS\") {\r\n            let adjData = action.payload.map((prod) => {\r\n                return {...prod, \"edit\": false, \"submit\": false}\r\n            });\r\n            return {...state, products:adjData}        \r\n        }\r\n\r\n        if(action.type === \"EDIT\") {\r\n            let editFrag = state.products.map((prod)=>{\r\n                if (prod.id === action.payload) {\r\n                    return { ...prod, edit:true }\r\n                }\r\n                return {...prod};\r\n               });   \r\n            return { ...state, products:editFrag }\r\n        }\r\n\r\n        if(action.type === \"DELETE_PROD\") {\r\n            let newProds = state.products.filter((prod) => prod.id !== action.payload);\r\n            state.products.map((prod)=>{\r\n                if (prod.id === action.payload) {\r\n                    let apiUrl = `http://localhost:7000/parcel_product/del_product/${action.payload}/`;\r\n                    let data = UseFetchJSON(apiUrl, 'DELETE');\r\n                    data.then((res)=> {\r\n                        if (res.status===\"success\") {\r\n                            setProdSus(res.data);\r\n                        } else {\r\n                            setProdErr(\"An error occured\");\r\n                        }\r\n                    }).catch((err) => console.log(err));\r\n                }\r\n               \r\n                 return null;\r\n               })  \r\n            return { ...state, products: newProds }\r\n        }\r\n\r\n        if(action.type === \"SUBMIT_EDITTED\") {\r\n            let submitFrag = state.products.map((prod)=>{\r\n                if (prod.id === action.payload) {\r\n                    let {edit_price, edit_disc, edit_qty} = editprod;\r\n                    let updateData = {\r\n                        \"prod_price\": edit_price,\r\n                        \"prod_qty\": edit_qty,\r\n                        \"prod_disc\": edit_disc,\r\n                        \"updated_at\": new Date().toISOString()\r\n                    }\r\n                    \r\n                    if (edit_price && edit_qty && edit_disc) {\r\n                        let apiUrl = `http://localhost:7000/parcel_product/update_product/${action.payload}/`;\r\n                        let data = UseFetchJSON(apiUrl, 'POST', updateData);\r\n                        data.then((res)=>{\r\n                            if (res.status === \"success\") {\r\n                                setProdSus(res.data);\r\n                                setEditProd({...editprod, edit_price:\"\", edit_disc:\"\", edit_qty:\"\"})\r\n                            } else if (res.status === \"error\") {\r\n                                setProdErr(res.data);\r\n                            } else {\r\n                                setProdErr(\"An error occured\");\r\n                            }\r\n                        }).catch((err) => setProdErr(err.message));\r\n                    } else {\r\n                        setProdErr(\"Some fields are empty, no changes made\")\r\n                    }\r\n                   \r\n                   \r\n                    return { ...prod, edit:false }\r\n                }\r\n                return {...prod};\r\n               });   \r\n            return { ...state, products:submitFrag }\r\n        }\r\n\r\n        if(action.type === \"CHANGE_PROD\") {\r\n            let changeFrag = state.products.map((prod)=>{\r\n                if (prod.id === action.payload.id) {\r\n                    let e = action.payload.e;\r\n                    let name = e.target.name;\r\n                    let value = e.target.value;\r\n                   setEditProd({...editprod, [name]:value});\r\n                    // console.log(editprod);\r\n                    return { ...prod, prod_price:editprod.edit_price, \r\n                        prod_disc:editprod.edit_disc, prod_qty:editprod.edit_qty  }\r\n                }\r\n                return {...prod};\r\n               });   \r\n            return { ...state, products:changeFrag }\r\n        }\r\n\r\n        return state;\r\n    }\r\n\r\n  \r\n    let logvend = JSON.parse(localStorage.getItem('logvend'));\r\n\r\n    const handleProductChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        setProduct({...product, [name]:value})\r\n    }\r\n\r\n   \r\n    const handleViewProd = () => {\r\n        setProdUpload(false);\r\n        setUploadNote(false);\r\n        setViewProd(true);\r\n    }\r\n\r\n    const handleUploadNote = () => {\r\n        setProdUpload(false);\r\n        setUploadNote(true);\r\n        setViewProd(false);\r\n    }\r\n\r\n    const handleProductSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (prodphoto && prod_name && prod_model && \r\n            prod_price && prod_desc && prod_disc) {\r\n                const formData = new FormData();\r\n            let full_path = $(\"#prod-file\").val();\r\n            let base_name = full_path.split('\\\\').pop().split('/').pop();\r\n            let vendor_name = logvend.last_name + \" \" + logvend.first_name;\r\n            console.log(base_name);\r\n            formData.append(\"vendor_name\", vendor_name);\r\n            formData.append(\"vendor_phone\", logvend.phone_no);\r\n            formData.append(\"vendor_email\", logvend.email);\r\n            formData.append(\"vend_photo\", logvend.vend_photo);\r\n            formData.append(\"prod_cat\", logvend.bus_category);\r\n            formData.append(\"prod_name\", prod_name);\r\n            formData.append(\"prod_model\", prod_model);\r\n            formData.append(\"prod_photo\", prodphoto, base_name);\r\n            formData.append(\"prod_price\", prod_price);\r\n            formData.append(\"prod_qty\", prod_qty);\r\n            formData.append(\"prod_disc\", prod_disc);\r\n            formData.append(\"prod_desc\", prod_desc);\r\n            formData.append(\"img_base\", base_name);\r\n            formData.append(\"upload_date\", new Date().toISOString());\r\n\r\n            let apiUrl = \"http://localhost:7000/parcel_product/product_upload/\";\r\n\r\n            let data = UseFetch(apiUrl, 'POST', formData);\r\n            data.then((res) => {\r\n                if (res.status === \"success\") {\r\n                    setProdSus(res.data);\r\n                } else if (res.status === \"error\") {\r\n                    setProdErr(res.data);\r\n                } else {\r\n                    setProdErr(\"An error occured\");\r\n                }\r\n            }).catch((err) => console.log(err));\r\n\r\n            } else {\r\n                setProdErr(\"Some fields are blank\");\r\n            }\r\n    }\r\n\r\n    const $ = window.$;\r\n    const handlePhotoUpload = (e) => {\r\n        let tmp_path = URL.createObjectURL(e.target.files[0]);\r\n        $(\"#target-img\").fadeIn(\"slow\").attr('src', tmp_path);\r\n        setProdPhoto(e.target.files[0]);\r\n    }\r\n  \r\n    useEffect(()=>{        \r\n        const fetchProducts = (email) => {\r\n            email = logvend.email;\r\n            let apiUrl = `http://localhost:7000/parcel_product/get_dist_ven_product/${email}/`; \r\n            let data = UseFetchJSON(apiUrl, 'GET');\r\n            data.then((res) => {\r\n                getProducts(res.data);\r\n            });\r\n        }\r\n      fetchProducts();\r\n    },[logvend.email, getProducts]);\r\n\r\n    useEffect((email)=>{\r\n        email = logvend.email;\r\n        let apiUrl = `http://localhost:7000/parcel_product/get_dist_temp_product/${email}/`; \r\n        let data = UseFetchJSON(apiUrl, 'GET');\r\n        data.then((res) => {\r\n            setTempProd(res.data);\r\n        });\r\n\r\n    },[logvend.email]);\r\n\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n    console.log(state);\r\n\r\n    let notifications = [];\r\n    if (state.products !== null) {\r\n        let apprNote = {\r\n            \"status\": \"success\",\r\n            \"data\": `You have ${state.products.length} approved products.`\r\n        }\r\n        if (state.products.length > 0)  notifications.push(apprNote);\r\n    }\r\n\r\n    if (tempProd !== null) {\r\n        let unapprNote = {\r\n            \"status\": \"error\",\r\n            \"data\": `You have ${tempProd.length} unapproved products`\r\n        }\r\n        if (tempProd.length > 0) notifications.push(unapprNote);\r\n    }\r\n      \r\n   \r\n    return (\r\n        <div className=\"prod-container\">\r\n            <div className=\"button-container\">\r\n                <button onClick={handleProdUpload} className='btn prod-button'>Upload Products</button>\r\n                <button onClick={handleViewProd} className='btn prod-button'>View Products</button>\r\n                <button onClick={handleUploadNote} className='btn prod-button'>Upload Notifications</button>\r\n            </div>\r\n            <div className='prod-container'>\r\n                {produpload?<form onSubmit={handleProductSubmit}>\r\n                    <legend style={{fontSize: \"1.2em\"}} className='Vendor-Log-Legend'>Product Upload</legend>\r\n                    <div className='photo-container'>\r\n                        <div className='upload-label'>\r\n                            <label htmlFor='prod_img'>Product Image</label>\r\n                            <input id='prod-file' onChange={handlePhotoUpload} name='prod_img' type='file'/>\r\n                        </div> \r\n                        <div className='avatar-container'>\r\n                            {prodphoto?<img id='target-img' alt='avatar' className='img-thumbnail' src=''/>:\"\"}\r\n                        </div>\r\n                    </div> <br/>\r\n                    {proderr?(<div id='apiAlert' style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-danger alert-dismissible' role='alert'>\r\n                                    {proderr}\r\n                                    <button className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\" }\r\n                    {prodsus?(<div  style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-success alert-dismissible' role='alert'>\r\n                                    {prodsus}\r\n                                    <button  className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\"}\r\n\r\n                    <div className='form-group'>\r\n                        <input name='prod_category' value={\"Product Category: \" + logvend.bus_category} type='text' readOnly=\"readonly\" className='form-control' placeholder='Product Name'/>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <input onChange={handleProductChange} name='prod_name' value={prod_name} type='text' className='form-control' placeholder='Product Name'/>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <input onChange={handleProductChange}  name='prod_model' value={prod_model} type='text' className='form-control' placeholder='Product Model'/>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <input onChange={handleProductChange}  name='prod_price' value={prod_price} type='text' className='form-control' placeholder='Product Price'/>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <input onChange={handleProductChange}  name='prod_disc' value={prod_disc} type='text' className='form-control' placeholder='Percentage Discount Allowed (Figure only)'/>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <input onChange={handleProductChange}  name='prod_qty' value={prod_qty} type='text' className='form-control' placeholder='Product Quantity'/>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <textarea onChange={handleProductChange}  name='prod_desc' value={prod_desc} className='form-control form-descrip' placeholder='Product Description'></textarea>\r\n                    </div>\r\n                    <button className='btn prod-button'>Submit</button>\r\n                </form>:\"\"}\r\n                {viewprod?<div>\r\n                    <h4 style={{textAlign:\"center\"}}>You have {state.products.length} Products</h4> <br/>\r\n                    {proderr?(<div id='apiAlert' style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-danger alert-dismissible' role='alert'>\r\n                                    {proderr}\r\n                                    <button className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\" }\r\n                    {prodsus?(<div  style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-success alert-dismissible' role='alert'>\r\n                                    {prodsus}\r\n                                    <button  className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\"}\r\n\r\n                    <div className='show-prod-container'>\r\n                        {state.products.map((prod, index)=>(\r\n                            <ProductFragment index={index} handleProdDelete={handleProdDelete} editprod={editprod} handleProdEditChange={handleProdEditChange} prod={prod} handleSubmitClick={handleSubmitClick} handleEditClick={handleEditClick}/>\r\n                        ))} \r\n                    </div>\r\n                </div>:\"\"}\r\n                {uploadnote?<div className=\"container\">\r\n                    {notifications.map((item, index) => {\r\n                       return (\r\n                       <div className={item.status===\"success\"?\"alert alert-success\":\"alert alert-danger\"}>\r\n                           <p style={{textAlign:\"center\", fontSize:\"1.2em\"}} key={index}>{item.data}</p>\r\n                       </div>)\r\n                    })}\r\n                </div>:\"\"}\r\n            </div>\r\n        </div>     \r\n    );\r\n}\r\n\r\nconst ProductFragment = memo(({prod, index, editprod, handleProdDelete, handleProdEditChange, handleEditClick, handleSubmitClick})=> {\r\n    return (\r\n        <div className='prod-frag img-thumbnail' key={index}>\r\n                            <div className='prod-frag-img'>\r\n                                <img className='img-thumbnail' alt='product' src={prod.prod_photo}/>\r\n                            </div>\r\n                            <div className='prod-detail'>\r\n                                <div>\r\n                                    <label className='badge'>Name:</label>\r\n                                   <input type='text' readOnly=\"readonly\" value={prod.prod_name}/>\r\n                                </div>\r\n                                <div>\r\n                                    <label className='badge'>Model:</label>\r\n                                    <input type='text' readOnly=\"readonly\" value={prod.prod_model}/>\r\n                                </div>\r\n                                <div>\r\n                                    <label className='badge'>Price:</label>\r\n                                    {prod.edit?<input name=\"edit_price\" onChange={(e)=>handleProdEditChange(prod.id, e)} type='text' value={editprod.edit_price}/>\r\n                                    :<input   type='text' readOnly=\"readonly\" value={prod.prod_price}/>}\r\n                                </div>\r\n                                <div>\r\n                                    <label className='badge'>Discount:</label>\r\n                                    {prod.edit?<input name=\"edit_disc\" onChange={(e)=>handleProdEditChange(prod.id, e)} type='text' value={editprod.edit_disc}/>\r\n                                    :<input   type='text' readOnly=\"readonly\" value={prod.prod_disc}/>}\r\n                                </div>\r\n                                <div>\r\n                                    <label className='badge'>Quantity:</label>\r\n                                    {prod.edit?<input name=\"edit_qty\" onChange={(e)=>handleProdEditChange(prod.id, e)} type='text' value={editprod.edit_qty}/>\r\n                                    :<input   type='text' readOnly=\"readonly\" value={prod.prod_qty}/>}\r\n                                </div> <br/>\r\n                                <div className='prod-btn'>\r\n                                    <button onClick={()=>handleEditClick(prod.id)} className=\"btn\">Edit</button>\r\n                                    {prod.edit && <button onClick={()=>handleSubmitClick(prod.id)} style={{backgroundColor:\"chartreuse\", color:\"black\"}}  className=\"btn\">Update</button>}\r\n                                    {prod.edit && <button onClick={()=>handleProdDelete(prod.id)} style={{backgroundColor:\"rgb(219, 33, 76)\", color:\"white\"}}   className=\"btn\">Delete</button>}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n    )\r\n});\r\n\r\nexport default VendProducts","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\VendDeals.js",["204"],"import './styles/vendor.css';\r\n// import { Link } from 'react-router-dom';\r\n// import CSRFTOKEN from './CSRFTOKEN';\r\nimport { useState, useCallback, useEffect, useReducer } from 'react';\r\nimport { UseFetchJSON, UseFetch } from './useFetch';\r\n\r\n\r\nconst VendDeals = () => {\r\n    \r\n    const [prodsus, setProdSus] = useState(\"\");\r\n    const [proderr, setProdErr] = useState(\"\");\r\n    const [loadDeals, setLoadDeals] = useState(true);\r\n\r\n    let logvend = JSON.parse(localStorage.getItem('logvend')) || null;\r\n    console.log(logvend);\r\n\r\n\r\n    \r\n   const initialDeals = {\r\n       \"deals\": []\r\n   }\r\n\r\n   const getDeals = useCallback((data) => {\r\n    return dispatch({\r\n        type: \"GET_DEALS\",\r\n        payload: data,\r\n    });\r\n  }, []);\r\n\r\n  const handleSupplyReadyClick = (e, order_id, product_id) => {\r\n    return dispatch({\r\n        type: \"SUPPLY_READY\",\r\n        payload: {\"e\":e, \"order_id\": order_id, \"product_id\": product_id}\r\n    });\r\n  }\r\n\r\n   const reducer = (state=initialDeals, action) => {\r\n       if(action.type === \"GET_DEALS\") {\r\n\r\n           let vendDealCollectn = [];\r\n        action.payload.forEach((deal) => {\r\n            deal.products.forEach((prod) => {\r\n                if(prod.vendor_phone === logvend.phone_no) vendDealCollectn.push(prod);\r\n            })            \r\n        });\r\n      \r\n        let modDealColl = [];\r\n        vendDealCollectn.forEach((deal) => {\r\n            action.payload.forEach((mod) => {                \r\n                if(mod.order_id === deal.order_id) {\r\n                    modDealColl.push({...deal, \r\n                        \"handled_dispatch\": mod.handled_dispatch,\r\n                        \"courier_name\": mod.courier_name,\r\n                        \"courier_phone\": mod.courier_phone\r\n                    });\r\n                }\r\n            });\r\n        });\r\n        return {...state, deals: modDealColl} \r\n       }\r\n\r\n       if(action.type === \"SUPPLY_READY\") {\r\n        let newState = state.deals.map((item) => {\r\n            if (item.order_id === action.payload.order_id && item.product_id === action.payload.product_id) {                                    \r\n                let order_id = action.payload.order_id;\r\n                let product_id = action.payload.product_id;\r\n                let e = action.payload.e;\r\n                let checked = e.target.checked;\r\n                item.is_supply_ready = checked;\r\n                console.log(checked);                \r\n                let formData = new FormData();\r\n                formData.append(\"is_supply_ready\", checked);\r\n                formData.append(\"updated_at\", new Date().toISOString());\r\n                let apUrl = `http://localhost:7000/parcel_dispatch/update_supplied_product/${order_id}/${product_id}/`;\r\n                let data = UseFetch(apUrl, 'POST', formData);\r\n                data.then((res) => {\r\n                    if (res.status === 'success') {\r\n                        setProdSus(res.data)\r\n                    }\r\n                }).catch((err) => console.log(err.message));\r\n                return item;\r\n            }\r\n            return { ...item }        \r\n\r\n        });\r\n        return { ...state, deals: newState }\r\n       }\r\n\r\n       return state;\r\n   }\r\n\r\n   useEffect(()=>{        \r\n    const fetchDeals = () => {\r\n        let apiUrl = 'http://localhost:7000/parcel_dispatch/get_dispatch_from_db/'; \r\n        let data = UseFetchJSON(apiUrl, 'GET');\r\n        data.then((res) => {\r\n            let deals = res.deals;\r\n            getDeals(deals);\r\n        }).catch((err) => console.log(err.message));\r\n    }\r\n    if(loadDeals) {\r\n        fetchDeals();\r\n    }\r\n    setLoadDeals(false);\r\n},[getDeals, loadDeals]);\r\n\r\n\r\n   const [state, dispatch] = useReducer(reducer, initialDeals);\r\n   console.log(state);\r\n\r\n\r\n    return (\r\n        <div>           \r\n            <p id='deal-count'>There are {state.deals.length} supply deals available</p>\r\n            \r\n             {proderr?(<div id='apiAlert' style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-danger alert-dismissible' role='alert'>\r\n                                    {proderr}\r\n                                    <button className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\" }\r\n             {prodsus?(<div id='apiAlert' style={{\"height\": \"50px\", \"textAlign\": \"center\"}} className='alert alert-success alert-dismissible' role='alert'>\r\n                                    {prodsus}\r\n                                    <button className='close' role='alert' data-dismiss='alert'><span>&times;</span></button>\r\n                    </div>): \"\" }\r\n            <div className='grid-deals'>\r\n                {state.deals.map((item, key) => {\r\n                    return (\r\n                        <div className='dispatch-prod-container' key={item.order_id + item.product_id}>\r\n                          \r\n                               <div className='dispatch-img-container'>\r\n                               <img className='img-thumbnail dispatch-prod-img' src={item.prod_photo} alt='prod-img' />                                   \r\n                               </div>\r\n                               <div>\r\n                                    <div><strong>Courier: </strong> {item.courier_name === \"000\"? \"No Courier yet\" :item.courier_name}</div>\r\n                                    <div><strong>Phone: </strong> {item.courier_phone === \"000\"? \"No Courier yet\" :item.courier_phone}</div>                                  \r\n                                    <div className={item.is_supply_received?\"delivery-yes\":\"delivery-no\"}>\r\n                                        <strong style={{color:\"black\"}}>Courier Status: </strong>\r\n                                            {item.is_supply_received?\"Received\":\"Pending\"}\r\n                                    </div>\r\n                                    <div className={item.is_received?\"delivery-yes\":\"delivery-no\"}>\r\n                                        <strong style={{color:\"black\"}}>Customer Status: </strong>\r\n                                            {item.is_received?\"Received\":\"Pending\"}\r\n                                    </div>\r\n                                    <div><strong>Order Id: </strong> {item.order_id}</div>\r\n                                    <div><strong>Product: </strong> {item.product_name}</div>\r\n                                    <div><strong>Model: </strong> {item.prod_model}</div>\r\n                                    <div><strong>Price: </strong> ₦ {item.prod_price}</div>\r\n                                    <div><strong>Qty: </strong> {item.quantity}</div>\r\n                                    <div><strong>Amount: </strong> ₦ {item.total_amount}</div>\r\n                                    <div><strong>Ready for supply: </strong><input onChange={(e) => handleSupplyReadyClick(e, item.order_id, item.product_id)}  type='checkbox' checked={item.is_supply_ready}  /></div>\r\n                               </div>\r\n                          \r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>     \r\n    );\r\n}\r\n\r\nexport default VendDeals","C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\VendTransactions.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\savecart.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\savesingleorder.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\useFetch.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\customerPrivatePages\\CustomerCart.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\customerPrivatePages\\CustomerNotification.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\customerPrivatePages\\CustomerComplain.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\customerPrivatePages\\CustomerDelivery.js",[],["205","206"],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\customerPrivatePages\\CustomerOrder.js",[],"C:\\Users\\EPHRAIN\\React_Projects\\parcel-app\\src\\components\\saveorder.js",[],{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":2,"column":10,"nodeType":"213","messageId":"214","endLine":2,"endColumn":18},{"ruleId":"211","severity":1,"message":"215","line":2,"column":44,"nodeType":"213","messageId":"214","endLine":2,"endColumn":50},{"ruleId":"211","severity":1,"message":"216","line":2,"column":52,"nodeType":"213","messageId":"214","endLine":2,"endColumn":65},{"ruleId":"211","severity":1,"message":"217","line":10,"column":9,"nodeType":"213","messageId":"214","endLine":10,"endColumn":16},{"ruleId":"211","severity":1,"message":"218","line":15,"column":9,"nodeType":"213","messageId":"214","endLine":15,"endColumn":16},{"ruleId":"211","severity":1,"message":"216","line":2,"column":46,"nodeType":"213","messageId":"214","endLine":2,"endColumn":59},{"ruleId":"211","severity":1,"message":"212","line":2,"column":61,"nodeType":"213","messageId":"214","endLine":2,"endColumn":69},{"ruleId":"211","severity":1,"message":"219","line":5,"column":8,"nodeType":"213","messageId":"214","endLine":5,"endColumn":22},{"ruleId":"211","severity":1,"message":"220","line":2,"column":20,"nodeType":"213","messageId":"214","endLine":2,"endColumn":29},{"ruleId":"211","severity":1,"message":"221","line":2,"column":31,"nodeType":"213","messageId":"214","endLine":2,"endColumn":42},{"ruleId":"211","severity":1,"message":"220","line":3,"column":20,"nodeType":"213","messageId":"214","endLine":3,"endColumn":29},{"ruleId":"211","severity":1,"message":"222","line":3,"column":31,"nodeType":"213","messageId":"214","endLine":3,"endColumn":41},{"ruleId":"211","severity":1,"message":"221","line":3,"column":43,"nodeType":"213","messageId":"214","endLine":3,"endColumn":54},{"ruleId":"211","severity":1,"message":"223","line":9,"column":10,"nodeType":"213","messageId":"214","endLine":9,"endColumn":22},{"ruleId":"224","severity":1,"message":"225","line":134,"column":251,"nodeType":"226","endLine":134,"endColumn":308},{"ruleId":"211","severity":1,"message":"227","line":27,"column":87,"nodeType":"213","messageId":"214","endLine":27,"endColumn":104},{"ruleId":"211","severity":1,"message":"221","line":1,"column":21,"nodeType":"213","messageId":"214","endLine":1,"endColumn":32},{"ruleId":"211","severity":1,"message":"215","line":1,"column":34,"nodeType":"213","messageId":"214","endLine":1,"endColumn":40},{"ruleId":"211","severity":1,"message":"228","line":1,"column":42,"nodeType":"213","messageId":"214","endLine":1,"endColumn":52},{"ruleId":"211","severity":1,"message":"229","line":2,"column":10,"nodeType":"213","messageId":"214","endLine":2,"endColumn":14},{"ruleId":"211","severity":1,"message":"230","line":64,"column":134,"nodeType":"213","messageId":"214","endLine":64,"endColumn":142},{"ruleId":"231","severity":1,"message":"232","line":203,"column":7,"nodeType":"233","endLine":203,"endColumn":17,"suggestions":"234"},{"ruleId":"211","severity":1,"message":"235","line":21,"column":9,"nodeType":"213","messageId":"214","endLine":21,"endColumn":18},{"ruleId":"211","severity":1,"message":"236","line":6,"column":10,"nodeType":"213","messageId":"214","endLine":6,"endColumn":18},{"ruleId":"211","severity":1,"message":"237","line":12,"column":21,"nodeType":"213","messageId":"214","endLine":12,"endColumn":31},{"ruleId":"211","severity":1,"message":"237","line":16,"column":21,"nodeType":"213","messageId":"214","endLine":16,"endColumn":31},{"ruleId":"211","severity":1,"message":"238","line":1,"column":52,"nodeType":"213","messageId":"214","endLine":1,"endColumn":60},{"ruleId":"211","severity":1,"message":"215","line":1,"column":62,"nodeType":"213","messageId":"214","endLine":1,"endColumn":68},{"ruleId":"211","severity":1,"message":"237","line":11,"column":21,"nodeType":"213","messageId":"214","endLine":11,"endColumn":31},{"ruleId":"207","replacedBy":"239"},{"ruleId":"209","replacedBy":"240"},"no-native-reassign",["241"],"no-negated-in-lhs",["242"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'createContext' is defined but never used.","'history' is assigned a value but never used.","'refresh' is assigned a value but never used.","'ProdDetailPage' is defined but never used.","'useEffect' is defined but never used.","'useCallback' is defined but never used.","'useReducer' is defined but never used.","'UseFetchJSON' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'is_email_verified' is assigned a value but never used.","'useContext' is defined but never used.","'Link' is defined but never used.","'provider' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'payment'. Either include it or remove the dependency array. You can also do a functional update 'setPayment(p => ...)' if you only need 'payment' in the 'setPayment' call.","ArrayExpression",["243"],"'cartItems' is assigned a value but never used.","'UseFetch' is defined but never used.","'setProdErr' is assigned a value but never used.","'Fragment' is defined but never used.",["241"],["242"],"no-global-assign","no-unsafe-negation",{"desc":"244","fix":"245"},"Update the dependencies array to be: [curOrder, payment]",{"range":"246","text":"247"},[8333,8343],"[curOrder, payment]"]